{
  "createdAt": "2025-09-19T17:02:15.958Z",
  "updatedAt": "2025-09-19T23:41:19.000Z",
  "id": "fedZGjwdp1WRw3cQ",
  "name": "Suno AI Music Generator using Suno API( Suno V4.5+)",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "AI Music Generator - Parameter Usage Guide\n1. **Prompt** (Music Description)\n    - Purpose: Describe the music content you want to generate.\n    - Example: \"A calm and relaxing piano track with soft melodies\".\n    - Character Limit: Maximum 3000 characters.\n    - Tips:\n      More detailed descriptions lead to better results.\n      Include emotions, rhythm, instruments, etc.\n      In current mode, this description will be used as lyrics content.\n2. **Style** (Music Style)\n    - Purpose: Specify the music genre or style.\n    - Example: \"Classical\", \"Jazz\", \"Pop\", \"Electronic\", \"Rock\".\n    - Character Limit: Maximum 200 characters.\n    - Common Styles: Classical,Jazz,Pop,Electronic,Rock,Hip-hop.\n3. **Title** (Music Title)\n    - Purpose: Set a title for the generated music.\n    - Example: \"Peaceful Piano Meditation\".\n    - Character Limit: Maximum 80 characters.\n    - Usage: Title will be displayed in player interfaces and filenames.\n4. **Api_key** (API Key)\n    - This is what you get in the first step.",
        "height": 500,
        "width": 640
      },
      "id": "28acd80e-afe7-4b5e-9c6e-961ede22a0c5",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        688,
        432
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "formTitle": "AI music generator",
        "formDescription": "Please fill in the following information to generate your music",
        "formFields": {
          "values": [
            {
              "fieldLabel": "prompt"
            },
            {
              "fieldLabel": "style"
            },
            {
              "fieldLabel": "title"
            }
          ]
        },
        "options": {}
      },
      "id": "fabb015f-e732-46a0-b86e-696f3a9f6b70",
      "name": "Submit Music Generation Parameters",
      "type": "n8n-nodes-base.formTrigger",
      "position": [
        0,
        912
      ],
      "webhookId": "791b190b-2acc-4d10-b593-c1929e67686c",
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"prompt\": \"{{$json.prompt}}\",\n  \"style\": \"{{$json.style}}\",\n  \"title\": \"{{$json.title}}\",\n  \"customMode\": true,\n  \"instrumental\": true,\n  \"model\": \"V4_5\",\n  \"callBackUrl\": \"https://api.example.com/callback\",\n  \"negativeTags\": \"\"\n}",
        "options": {}
      },
      "id": "a9fbbb31-9479-4594-85bb-f0e5b2f57c82",
      "name": "Send Music Generation Request to KIE.ai API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -336,
        1744
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "amount": 30
      },
      "id": "b6d1e752-d1ad-42fc-a1c5-ead97f4b39e9",
      "name": "Wait for Music Processing",
      "type": "n8n-nodes-base.wait",
      "position": [
        3056,
        1136
      ],
      "webhookId": "efca324d-e98a-469c-90f6-41082f44fb75",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "https://api.sunoapi.org/api/v1/generate/record-info",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{$json.data.taskId}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "48da77f5-6c09-46e6-a465-6a67040cbeb0",
      "name": "Poll Music Generation Status",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3424,
        1136
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "flynbMcZ320tP6Xq",
          "name": "Suno bear"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "faf4bf4c-8a8e-49a3-b62a-14a4af0b7dfb",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "true",
              "rightValue": "={{$json.data.status == \"SUCCESS\"}}"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "dbfa987d-7342-432a-97a5-078b7dc9d6d2",
      "name": "Check if Music Generation Complete",
      "type": "n8n-nodes-base.if",
      "position": [
        3232,
        1360
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "73bdb28d-6b86-47d5-98d2-4647600a11bd",
              "name": "audioUrl1",
              "type": "string",
              "value": "={{$json.data.response.sunoData[0].audioUrl}}"
            },
            {
              "id": "3f468fe2-189d-40a1-805d-9090b93bfe6e",
              "name": "audioUrl2",
              "type": "string",
              "value": "={{ $json.data.response.sunoData[1].audioUrl }}"
            }
          ]
        },
        "options": {}
      },
      "id": "239877dd-a026-45b2-a09a-de430c0bb982",
      "name": "Format and Display Music Results",
      "type": "n8n-nodes-base.set",
      "position": [
        3520,
        1344
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.sunoapi.org/api/v1/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"prompt\": \"{{$json.prompt}}\",\n  \"style\": \"{{$json.style}}\",\n  \"title\": \"{{$json.title}}\",\n  \"customMode\": true,\n  \"instrumental\": true,\n  \"model\": \"V4_5\",\n  \"callBackUrl\": \"https://api.example.com/callback\",\n  \"negativeTags\": \"\"\n}",
        "options": {}
      },
      "id": "206a5498-9e6d-4936-aea5-e67c9d3637ad",
      "name": "Send Music Generation Request to SUNO API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -608,
        1520
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "flynbMcZ320tP6Xq",
          "name": "Suno bear"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -256,
        1152
      ],
      "id": "c6eb40c8-3a61-42d9-8d7b-5624336ccdca",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1696,
        1344
      ],
      "id": "991b3807-667b-4aaf-a453-104b89ba1767",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2240,
        1840
      ],
      "id": "6585b69c-3cad-4722-919f-aa387f6b3c96",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=VERSE: {{ $json.output.verse }} \n\nCHORUS:{{ $json.output.chorus }}\n\nOUTRO:{{ $json.output.outro }}\n\nGoal: Produce a vertical 30s b-roll plan (no talking heads) that syncs to the above lyrics.\n\nInstructions (model-facing):\n\nInput: the lyrics in the format above.\n\nOutput: a time-locked shot list from 0:00–0:30, sized 1080×1920, 24–30 fps.\n\nVibe: playful, wonder-filled; readability over spectacle; captions always in safe zones.\n\nDesign system:\n\nPalette: deep space blues/purples, warm golds (facts/origins), teal/mint (biology/process).\n\nTypography: bold sans, large mobile-safe, high contrast.\n\nMotion: smooth dolly/parallax, macro push-ins, particle morph transitions. No shaky cam.\n\nCaptions: ≤8 words per on-screen line; prioritize HOOK lines; keep padding from edges.\n\nMapping rule: Each lyric line → one visual beat; chorus lines get bigger typography + simple loopable motifs.\n\nTransitions: particle morphs, match cuts, light sweeps; avoid glitch/strobe/gore/logos.\n\nDeliverables: JSON shot list + short human-readable outline.\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2208,
        1632
      ],
      "id": "f2c7c684-7667-4490-9eaf-2edb86822412",
      "name": "Video agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"<short title ≤ 60 chars>\",\n  \"bpm\": 112,\n  \"key\": \"C major\",\n  \"hook\": \"<EXACTLY five words>\",\n  \"verse\": [\n    \"The periodic table groups by how atoms act—\",\n    \"metals here, halogens there—patterns, not just names.\",\n    \"Noble gases rarely react; their shells are full—\",\n    \"they glow in signs but keep to themselves.\",\n    \"Carbon chains build life—rings, branches, backbone code—\",\n    \"swap a bond, and form shifts from sweet to strong.\",\n    \"Water’s bent angle makes poles—tiny magnets—\",\n    \"it sticks, it dissolves, it carries life.\"\n  ],\n  \"chorus\": [\n    \"<HOOK> (crowd: \\\"...\\\")\",\n    \"<supporting line>\",\n    \"<supporting line>\",\n    \"<HOOK> (crowd: \\\"...\\\")\"\n  ],\n  \"outro\": [\n    \"<tag line>\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1888,
        1344
      ],
      "id": "9e0180ad-3c1e-4fec-8d47-f04b376e15dc",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"video\": {\n    \"resolution\": \"1080x1920\",\n    \"fps\": 30,\n    \"durationSec\": 30,\n    \"palette\": [\"space-blue\", \"purple\", \"gold\", \"teal\"],\n    \"font\": \"Bold Sans\",\n    \"captionStyle\": {\n      \"maxWordsPerLine\": 8,\n      \"safeMarginPx\": 96,\n      \"position\": \"bottom-center\",\n      \"stroke\": true,\n      \"dropShadow\": true\n    }\n  },\n  \"shots\": [\n    {\n      \"start\": \"0.00\",\n      \"end\": \"2.00\",\n      \"caption\": \"TITLE: {{title}}\",\n      \"visual\": \"Particles or a simple motif form the title over a clean starry background\",\n      \"elements\": [\"particles\", \"title\", \"subtle texture\"],\n      \"motion\": \"slow push-in\",\n      \"transitionIn\": \"fade\",\n      \"transitionOut\": \"light sweep\",\n      \"notes\": \"Large, high-contrast type; safe margins\"\n    },\n\n    { \"start\": \"2.00\", \"end\": \"3.50\",\n      \"caption\": \"{{verse[0]}}\",\n      \"visual\": \"Wide starfield; gentle parallax\",\n      \"elements\": [\"starfield\"],\n      \"motion\": \"very slow pan\",\n      \"transitionIn\": \"light sweep\",\n      \"transitionOut\": \"match cut\",\n      \"notes\": \"Keep background dim for legibility\"\n    },\n    { \"start\": \"3.50\", \"end\": \"5.00\",\n      \"caption\": \"{{verse[1]}}\",\n      \"visual\": \"Gold particles drift across frame\",\n      \"elements\": [\"particles\",\"gold flecks\"],\n      \"motion\": \"left-to-right drift\",\n      \"transitionIn\": \"match cut\",\n      \"transitionOut\": \"crossfade\",\n      \"notes\": \"Subtle depth of field\"\n    },\n    { \"start\": \"5.00\", \"end\": \"6.50\",\n      \"caption\": \"{{verse[2]}}\",\n      \"visual\": \"Planet limb with soft aurora\",\n      \"elements\": [\"planet limb\",\"aurora\"],\n      \"motion\": \"forward dolly\",\n      \"transitionIn\": \"crossfade\",\n      \"transitionOut\": \"light sweep\",\n      \"notes\": \"Place caption lower-third\"\n    },\n    { \"start\": \"6.50\", \"end\": \"8.00\",\n      \"caption\": \"{{verse[3]}}\",\n      \"visual\": \"Constellation lines animate briefly\",\n      \"elements\": [\"stars\",\"constellation lines\"],\n      \"motion\": \"line draw-on\",\n      \"transitionIn\": \"light sweep\",\n      \"transitionOut\": \"match cut\",\n      \"notes\": \"Keep lines thin; avoid clutter\"\n    },\n    { \"start\": \"8.00\", \"end\": \"9.50\",\n      \"caption\": \"{{verse[4]}}\",\n      \"visual\": \"Abstract grid with glowing nodes\",\n      \"elements\": [\"grid\",\"nodes\"],\n      \"motion\": \"slow zoom\",\n      \"transitionIn\": \"match cut\",\n      \"transitionOut\": \"crossfade\",\n      \"notes\": \"Use teal accents for ‘science’ feel\"\n    },\n    { \"start\": \"9.50\", \"end\": \"11.00\",\n      \"caption\": \"{{verse[5]}}\",\n      \"visual\": \"Macro texture (nebula/ink-in-water)\",\n      \"elements\": [\"nebula\",\"ink swirl\"],\n      \"motion\": \"organic swirl\",\n      \"transitionIn\": \"crossfade\",\n      \"transitionOut\": \"match cut\",\n      \"notes\": \"Keep contrast behind text\"\n    },\n    { \"start\": \"11.00\", \"end\": \"12.50\",\n      \"caption\": \"{{verse[6]}}\",\n      \"visual\": \"Orbiting atom line-art overlay\",\n      \"elements\": [\"atom line art\"],\n      \"motion\": \"steady orbital motion\",\n      \"transitionIn\": \"match cut\",\n      \"transitionOut\": \"light sweep\",\n      \"notes\": \"Minimal strokes; no clutter near captions\"\n    },\n    { \"start\": \"12.50\", \"end\": \"14.00\",\n      \"caption\": \"{{verse[7]}}\",\n      \"visual\": \"Particle stream funnels toward center\",\n      \"elements\": [\"particle stream\"],\n      \"motion\": \"centripetal flow\",\n      \"transitionIn\": \"light sweep\",\n      \"transitionOut\": \"kinetic type wipe\",\n      \"notes\": \"Prepare for chorus impact\"\n    },\n\n    { \"start\": \"14.00\", \"end\": \"17.00\",\n      \"caption\": \"{{chorus[0]}}\",\n      \"visual\": \"BIG kinetic type for the HOOK; particles morph into simple icons matching theme\",\n      \"elements\": [\"big text\",\"particles→icons morph\"],\n      \"motion\": \"scale pulse on beats\",\n      \"transitionIn\": \"type-on\",\n      \"transitionOut\": \"match cut\",\n      \"notes\": \"Use gold for key words; keep background simple\"\n    },\n    { \"start\": \"17.00\", \"end\": \"20.00\",\n      \"caption\": \"{{chorus[1]}}\",\n      \"visual\": \"Looping motif: simplified diagram (e.g., compass/planet/cell) animates subtly\",\n      \"elements\": [\"diagram\",\"loop motif\"],\n      \"motion\": \"slow loop\",\n      \"transitionIn\": \"match cut\",\n      \"transitionOut\": \"crossfade\",\n      \"notes\": \"Maintain caption priority over visuals\"\n    },\n    { \"start\": \"20.00\", \"end\": \"23.00\",\n      \"caption\": \"{{chorus[2]}}\",\n      \"visual\": \"Split screen: cosmos left, concept right (e.g., magnet lines, cells, map)\",\n      \"elements\": [\"split screen\",\"cosmos\",\"concept\"],\n      \"motion\": \"opposed parallax\",\n      \"transitionIn\": \"crossfade\",\n      \"transitionOut\": \"type wipe\",\n      \"notes\": \"Add thin outline to caption for contrast\"\n    },\n    { \"start\": \"23.00\", \"end\": \"26.00\",\n      \"caption\": \"{{chorus[3]}}\",\n      \"visual\": \"BIG kinetic type returns for final HOOK; background motif loops\",\n      \"elements\": [\"big text\",\"loop motif\"],\n      \"motion\": \"beat-synced scale\",\n      \"transitionIn\": \"type-on\",\n      \"transitionOut\": \"fade\",\n      \"notes\": \"Match earlier hook styling for cohesion\"\n    },\n\n    {\n      \"start\": \"26.00\",\n      \"end\": \"30.00\",\n      \"caption\": \"{{outro[0]}}\",\n      \"visual\": \"End card with looping particle field; optional CTA bottom-right ('Save & Share')\",\n      \"elements\": [\"particles loop\",\"CTA\",\"logo placeholder\"],\n      \"motion\": \"very slow push-in\",\n      \"transitionIn\": \"fade\",\n      \"transitionOut\": \"cut\",\n      \"notes\": \"Color-match first shot for seamless loop; keep CTA small\"\n    }\n  ]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2288,
        1360
      ],
      "id": "167e98b9-9e2c-4e94-aa3a-026c04cf924f",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        448,
        1344
      ],
      "id": "95ad7b7c-c230-439a-93c2-4bf3779b700d",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "mode": "list",
          "cachedResultName": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "cachedResultUrl": "https://www.notion.so/27358cd71b1580e5965fd144b72c15b4"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Theme|title",
              "title": "={{ $json.theme }}"
            },
            {
              "key": "OneLiner|rich_text",
              "textContent": "={{ $json.one_liner }}"
            },
            {
              "key": "Hash|number",
              "numberValue": "={{ $json._hash }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1392,
        1136
      ],
      "id": "a4e78925-1b76-48ea-bd09-f363a32cf8c4",
      "name": "Create a database page",
      "credentials": {
        "notionApi": {
          "id": "lDq6KxxGETipZmXY",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "mode": "list",
          "cachedResultName": "Themes",
          "cachedResultUrl": "https://www.notion.so/27358cd71b1580e5965fd144b72c15b4"
        },
        "limit": 100,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        0,
        1152
      ],
      "id": "54a8dacc-1d72-4ab3-a64a-7ce2e91f26a5",
      "name": "Get many database pages",
      "credentials": {
        "notionApi": {
          "id": "lDq6KxxGETipZmXY",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Input: Agent JSON on $json.data; past themes on $json.pastThemes (array of strings)\n// Output: either passes through or throws to trigger a regenerate loop\n\nfunction normalize(s) {\n  return s.toLowerCase().replace(/\\s+/g, ' ').trim();\n}\n\nfunction jaroWinkler(s1, s2) {\n  // Lightweight similarity; good enough for titles\n  const m = Math.floor(Math.max(s1.length, s2.length) / 2) - 1;\n  let matches1 = new Array(s1.length).fill(false);\n  let matches2 = new Array(s2.length).fill(false);\n  let matches = 0, transpositions = 0;\n\n  for (let i = 0; i < s1.length; i++) {\n    const start = Math.max(0, i - m), end = Math.min(i + m + 1, s2.length);\n    for (let j = start; j < end; j++) {\n      if (!matches2[j] && s1[i] === s2[j]) { matches1[i] = matches2[j] = true; matches++; break; }\n    }\n  }\n  if (matches === 0) return 0;\n\n  let k = 0;\n  for (let i = 0; i < s1.length; i++) {\n    if (matches1[i]) {\n      while (!matches2[k]) k++;\n      if (s1[i] !== s2[k]) transpositions++;\n      k++;\n    }\n  }\n  transpositions /= 2;\n\n  const j = (matches / s1.length + matches / s2.length + (matches - transpositions) / matches) / 3;\n\n  // Winkler prefix boost\n  let prefix = 0;\n  for (let i = 0; i < Math.min(4, s1.length, s2.length); i++) {\n    if (s1[i] === s2[i]) prefix++; else break;\n  }\n  return j + prefix * 0.1 * (1 - j);\n}\n\nconst agent = $json.output; // JSON from Agent\nconst theme = normalize(agent.theme || '');\nconst line  = normalize(agent.one_liner || '');\n\nconst past = ($json.pastThemes || []).map(normalize);\nconst candidate = `${theme} | ${line}`;\n\n// Quick hash to catch exact/near-exact repeats\nfunction simpleHash(s) {\n  let h = 0; for (let i = 0; i < s.length; i++) h = (h * 31 + s.charCodeAt(i)) | 0;\n  return h >>> 0;\n}\nconst candHash = simpleHash(candidate);\n\n// Thresholds: adjust to be stricter/looser\nconst SIM_THRESH = 0.90; // 0..1 (higher = stricter)\n\nlet tooSimilar = false;\nfor (const prev of past) {\n  const sim = jaroWinkler(candidate, prev);\n  if (sim >= SIM_THRESH || simpleHash(prev) === candHash) {\n    tooSimilar = true; break;\n  }\n}\n\nif (tooSimilar) {\n  // Throwing makes the node fail and lets you loop back to the Agent\n  throw new Error('Theme too similar to a past entry. Regenerate.');\n}\n\n// If it's unique, expose it for saving\nreturn { ...agent, _hash: candHash };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        1152
      ],
      "id": "200cc1bc-ad24-4dd8-8c91-99060a5a02bc",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fd34a46c-85f5-42a1-a056-cf1108603b6f",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1072,
        1152
      ],
      "id": "ce908dcb-e8b0-480f-91d1-96b6bd2559c6",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Input is many items from Data Store. We output ONE item.\nconst themes = $('Get many database pages').all().map(i => {\n  console.log(i);\n  const t = i.json.name || '';\n  const l = i.json.property_one_liner || '';\n  return `${t} | ${l}`.trim();\n});\nreturn [{ json: { pastThemes: themes } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        1152
      ],
      "id": "184d6acb-1920-4da6-aefb-3b535a6d4d5c",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"theme\": \"Concise unique concept title\",\n  \"one_liner\": \"Catchy 1-sentence angle\",\n  \"tags\": [\"mood\",\"genre\",\"tempo\",\"palette\"],\n  \"why_unique\": \"Concrete reason why it’s unlike any previous entry\",\n  \"seed_lyric\": \"1-2 lines in the vibe\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        672,
        1344
      ],
      "id": "d48caf99-ca14-47c8-a7a3-9e01c354f5dd",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2080,
        1344
      ],
      "id": "a9899d8f-e139-4ab9-acb1-b7a005b0f7c5",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2432,
        1840
      ],
      "id": "0cf74a01-187e-4965-9dcd-e83c30f73a42",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "content": "Could spiral into recursion",
        "height": 80,
        "width": 256
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        992,
        1280
      ],
      "id": "edf45ea5-8703-4aa5-bd7a-3e233d4687d8",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Goal: Create a short, ultra-catchy educational song with lyrics about cosmic fun facts that works on TikTok/Reels. stick to only one funfact throuh the entire songs. You dont have to rhyme that much, keep it simple wording, plain even. Make it really educational and with propper science terminology, I want to learn from this and make people learn from this. I need it to be viral. Needs to rhyme.\n\nInstructions (model-facing):\n\nTopic: {{ $json.property_one_liner }}\n\nAudience & tone: General audience, playful / wonder-filled, kid-safe wording, high intelligibility.\n\nLength: 40–60s total; vocals start at 0s or within 2 bars.\n\nTempo/Key: 140 BPM; C major or A minor (easy to sing on phones).\n\nStructure:\n\nVerse (16 lines): 6–9 syllables, ABAB rhyme.\n\nOutro (1–2 lines): quick summary/tag.\n\nFacts style: Numbers & comparisons (e.g., “Light needs ~8 min from Sun”), records (“largest star…”, “fastest spin…”), simple causes (“why galaxies look redshifted”). No jargon; prefer plain analogies (“size like a city”).\n\nMix notes: Vocal-forward; clear mids for phone speakers; minimal reverb; no busy fills over vocals.\n\nSafety: Keep everything non-scary (no disaster gore), no brand names, no politics.",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1712,
        1136
      ],
      "id": "57218eab-c5af-4931-8ec7-100343bc75fd",
      "name": "lyrics clanker"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a music concept generator. Your job is to create a brand-new song THEME each run.\nGive me a random science or bilogy or history fact, like really deep science or bilogy or history fact that I can use to generate songs. Just the fact, no soup around. Try to stay original. Theme should have potential to go viral on social sites. \n\nRequirements:\n- Must NOT overlap with previously used themes (provided as JSON array in {{ $json.pastThemes }}).\n- Be original in topic, angle, and imagery — not just wording.\n- Avoid near-duplicates (e.g., “lonely astronaut” ≈ “solitary cosmonaut”).\n- Return STRICT JSON only (no extra text)\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        512,
        1152
      ],
      "id": "772c71fb-7456-4a31-bc43-289bfd0a647f",
      "name": "Theme clanker"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Task: Given raw song lyrics, generate:\n\nVertical 1080×1920, 30–40s b-roll synced to the input lyrics. Use big, mobile-safe captions (≤8 words/line), place in safe zones. One visual beat per lyric line; hook lines use bold kinetic type. Palette: deep space blues/purples plus an accent that matches the song’s theme (e.g., gold/teal). Motion: smooth dolly/parallax, macro push-ins, particle/match-cut transitions. Keep readability over spectacle. Avoid shaky cam, glitches, logos, strobe/gore. Deliver a time-coded shot list covering 0:00–end.\n\nInput:\n\nVERSE: {{ $json.output.verse }}\nCHORUS: {{ $json.output.chorus }}\nOUTRO: {{ $json.output.outro }}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2128,
        1136
      ],
      "id": "3a595ffe-8323-4d14-a516-86e5e2ef475f",
      "name": "Video script clanker",
      "retryOnFail": true,
      "maxTries": 2,
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.sunoapi.org/api/v1/generate",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "=VERSE:{{ $('lyrics clanker').item.json.output.verse }}\n\nCHORUS: {{ $('lyrics clanker').item.json.output.chorus }}\n\nOUTRO: {{ $('lyrics clanker').item.json.output.outro }}\n\nHOOK: {{ $('lyrics clanker').item.json.output.hook }}"
            },
            {
              "name": "style",
              "value": "Kpop spoken-word, 140 BPM, A minor. No intro—voice at 2s. Female, spoken to rap singing cadence. ~60s: Minimal palette (side-chained pads, clean kick, sub, airy plucks). Vocal-forward; avoid autotune artifacts and dense fills."
            },
            {
              "name": "title",
              "value": "={{ $('lyrics clanker').item.json.output.title }}"
            },
            {
              "name": "customMode",
              "value": "true"
            },
            {
              "name": "instrumental",
              "value": "false"
            },
            {
              "name": "model",
              "value": "V4_5"
            },
            {
              "name": "negativeTags",
              "value": "long intro,instrumental intro,delayed vocals,autotune,heavy reverb,dense fills,busy percussion,vocoder,distortion,glitch fx, tempo changes,choir"
            },
            {
              "name": "vocalGender",
              "value": "f"
            },
            {
              "name": "styleWeight",
              "value": "0.80"
            },
            {
              "name": "weirdnessConstraint",
              "value": "0.35"
            },
            {
              "name": "audioWeight",
              "value": "0.65"
            },
            {
              "name": "callBackUrl",
              "value": "https://api.example.com/callback"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2608,
        1136
      ],
      "id": "64d1a2b0-50c4-40eb-ae6a-d6a14455edd2",
      "name": "Request create song",
      "credentials": {
        "httpBearerAuth": {
          "id": "flynbMcZ320tP6Xq",
          "name": "Suno bear"
        }
      }
    }
  ],
  "connections": {
    "Wait for Music Processing": {
      "main": [
        [
          {
            "node": "Poll Music Generation Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Poll Music Generation Status": {
      "main": [
        [
          {
            "node": "Check if Music Generation Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Music Generation Complete": {
      "main": [
        [
          {
            "node": "Format and Display Music Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait for Music Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Submit Music Generation Parameters": {
      "main": [
        []
      ]
    },
    "Send Music Generation Request to KIE.ai API": {
      "main": [
        []
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get many database pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "lyrics clanker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Video agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "lyrics clanker",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Video script clanker",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Theme clanker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a database page": {
      "main": [
        [
          {
            "node": "lyrics clanker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many database pages": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create a database page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Theme clanker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Theme clanker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Theme clanker",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Video script clanker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Video agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "lyrics clanker": {
      "main": [
        [
          {
            "node": "Video script clanker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Theme clanker": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video script clanker": {
      "main": [
        [
          {
            "node": "Request create song",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request create song": {
      "main": [
        [
          {
            "node": "Wait for Music Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateId": "6046",
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "8af690d5-3a68-4d11-80a0-297cbe85a94b",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-19T17:02:15.972Z",
      "updatedAt": "2025-09-19T17:02:15.972Z",
      "role": "workflow:owner",
      "workflowId": "fedZGjwdp1WRw3cQ",
      "projectId": "kqMrkEZYsdGVbgzw"
    }
  ],
  "tags": []
}