{
  "createdAt": "2025-09-20T21:46:35.211Z",
  "updatedAt": "2025-10-19T11:06:35.000Z",
  "id": "ESI2dDbq6Kd1Bi0f",
  "name": "Reels eevee clanker - v1 working",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "AI Music Generator - Parameter Usage Guide\n1. **Prompt** (Music Description)\n    - Purpose: Describe the music content you want to generate.\n    - Example: \"A calm and relaxing piano track with soft melodies\".\n    - Character Limit: Maximum 3000 characters.\n    - Tips:\n      More detailed descriptions lead to better results.\n      Include emotions, rhythm, instruments, etc.\n      In current mode, this description will be used as lyrics content.\n2. **Style** (Music Style)\n    - Purpose: Specify the music genre or style.\n    - Example: \"Classical\", \"Jazz\", \"Pop\", \"Electronic\", \"Rock\".\n    - Character Limit: Maximum 200 characters.\n    - Common Styles: Classical,Jazz,Pop,Electronic,Rock,Hip-hop.\n3. **Title** (Music Title)\n    - Purpose: Set a title for the generated music.\n    - Example: \"Peaceful Piano Meditation\".\n    - Character Limit: Maximum 80 characters.\n    - Usage: Title will be displayed in player interfaces and filenames.\n4. **Api_key** (API Key)\n    - This is what you get in the first step.",
        "height": 500,
        "width": 640
      },
      "id": "5c571b09-5a10-4030-bf2b-a9a634018f45",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1168,
        1104
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "amount": 30
      },
      "id": "896b07a1-134e-4cba-9438-0a7c8e9e47b0",
      "name": "Wait for Music Processing",
      "type": "n8n-nodes-base.wait",
      "position": [
        112,
        4256
      ],
      "webhookId": "9588f687-f211-47e3-a528-966826e7c59f",
      "typeVersion": 1.1,
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://api.sunoapi.org/api/v1/generate/record-info",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{$json.data.taskId}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "ce0ee6bf-40c1-4ef2-a0e0-a7201a3a7340",
      "name": "Poll Music Generation Status",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        336,
        4176
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "flynbMcZ320tP6Xq",
          "name": "Suno bear"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "faf4bf4c-8a8e-49a3-b62a-14a4af0b7dfb",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "true",
              "rightValue": "={{$json.data.status == \"SUCCESS\"}}"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "118a398a-d17b-41bd-944c-aaece5df4cd0",
      "name": "Check if Music Generation Complete",
      "type": "n8n-nodes-base.if",
      "position": [
        560,
        4256
      ],
      "typeVersion": 2.2,
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "73bdb28d-6b86-47d5-98d2-4647600a11bd",
              "name": "audioUrl1",
              "type": "string",
              "value": "={{$json.data.response.sunoData[0].audioUrl}}"
            },
            {
              "id": "3f468fe2-189d-40a1-805d-9090b93bfe6e",
              "name": "audioUrl2",
              "type": "string",
              "value": "={{ $json.data.response.sunoData[1].audioUrl }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a4dd5ea7-16d9-41fc-a76f-526e0530b032",
      "name": "Format and Display Music Results",
      "type": "n8n-nodes-base.set",
      "position": [
        784,
        4256
      ],
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1008,
        2448
      ],
      "id": "8034b7ff-53ed-49ef-831b-ef617dd8c843",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -976,
        1904
      ],
      "id": "c2585525-017d-47cc-b89d-035c259f147f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"<short title ≤ 60 chars>\",\n  \"bpm\": 112,\n  \"key\": \"C major\",\n  \"hook\": \"<EXACTLY five words>\",\n  \"verse\": [\n    \"The periodic table groups by how atoms act—\",\n    \"metals here, halogens there—patterns, not just names.\",\n    \"Noble gases rarely react; their shells are full—\",\n    \"they glow in signs but keep to themselves.\",\n    \"Carbon chains build life—rings, branches, backbone code—\",\n    \"swap a bond, and form shifts from sweet to strong.\",\n    \"Water’s bent angle makes poles—tiny magnets—\",\n    \"it sticks, it dissolves, it carries life.\"\n  ],\n  \"chorus\": [\n    \"<HOOK> (crowd: \\\"...\\\")\",\n    \"<supporting line>\",\n    \"<supporting line>\",\n    \"<HOOK> (crowd: \\\"...\\\")\"\n  ],\n  \"outro\": [\n    \"<tag line>\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -720,
        1904
      ],
      "id": "2556a887-9e88-4cfe-9e46-0acfb4bcabbd",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"timeline\": {\n        \"soundtrack\": {\n            \"src\": \"https://s3-ap-southeast-2.amazonaws.com/shotstack-assets/music/moment.mp3\",\n            \"effect\": \"fadeOut\"\n        },\n        \"tracks\": [\n            {\n                \"clips\": [\n                    {\n                        \"asset\": {\n                            \"type\": \"text\",\n                            \"text\": \"HELLO WORLD\",\n                            \"font\": {\n                                \"family\": \"Montserrat ExtraBold\",\n                                \"color\": \"#ffffff\",\n                                \"size\": 32\n                            },\n                            \"alignment\": {\n                                \"horizontal\": \"left\"\n                            }\n                        },\n                        \"start\": 0,\n                        \"length\": 5,\n                        \"transition\": {\n                            \"in\": \"fade\",\n                            \"out\": \"fade\"\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    \"output\": {\n        \"format\": \"mp4\",\n        \"size\": {\n            \"width\": 1080,\n            \"height\": 920\n        }\n    }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -496,
        4688
      ],
      "id": "2a81d590-6d59-4e4b-b8f7-ae44ae6945f6",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -304,
        2672
      ],
      "id": "791aa2da-5ff3-4b7a-b9d3-ab5cc25cb3be",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "mode": "list",
          "cachedResultName": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "cachedResultUrl": "https://www.notion.so/27358cd71b1580e5965fd144b72c15b4"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Theme|title",
              "title": "={{ $json.title }}"
            },
            {
              "key": "OneLiner|rich_text",
              "textContent": "={{ $json.image_prompt }}"
            },
            {
              "key": "Hash|number",
              "numberValue": "={{ $json._hash }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        608,
        2448
      ],
      "id": "7d67754d-beed-402c-9d53-b80ad42a378a",
      "name": "Create a database page",
      "credentials": {
        "notionApi": {
          "id": "lDq6KxxGETipZmXY",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Input: Agent JSON on $json.data; past themes on $json.pastThemes (array of strings)\n// Output: either passes through or throws to trigger a regenerate loop\n\nfunction normalize(s) {\n  return s.toLowerCase().replace(/\\s+/g, ' ').trim();\n}\n\nfunction jaroWinkler(s1, s2) {\n  // Lightweight similarity; good enough for titles\n  const m = Math.floor(Math.max(s1.length, s2.length) / 2) - 1;\n  let matches1 = new Array(s1.length).fill(false);\n  let matches2 = new Array(s2.length).fill(false);\n  let matches = 0, transpositions = 0;\n\n  for (let i = 0; i < s1.length; i++) {\n    const start = Math.max(0, i - m), end = Math.min(i + m + 1, s2.length);\n    for (let j = start; j < end; j++) {\n      if (!matches2[j] && s1[i] === s2[j]) { matches1[i] = matches2[j] = true; matches++; break; }\n    }\n  }\n  if (matches === 0) return 0;\n\n  let k = 0;\n  for (let i = 0; i < s1.length; i++) {\n    if (matches1[i]) {\n      while (!matches2[k]) k++;\n      if (s1[i] !== s2[k]) transpositions++;\n      k++;\n    }\n  }\n  transpositions /= 2;\n\n  const j = (matches / s1.length + matches / s2.length + (matches - transpositions) / matches) / 3;\n\n  // Winkler prefix boost\n  let prefix = 0;\n  for (let i = 0; i < Math.min(4, s1.length, s2.length); i++) {\n    if (s1[i] === s2[i]) prefix++; else break;\n  }\n  return j + prefix * 0.1 * (1 - j);\n}\n\nconst agent = $json.output; // JSON from Agent\nconst theme = normalize(agent.image_prompt || '');\nconst line  = normalize(agent.title || '');\n\nconst past = ($json.pastThemes || []).map(normalize);\nconst candidate = `${theme} | ${line}`;\n\n// Quick hash to catch exact/near-exact repeats\nfunction simpleHash(s) {\n  let h = 0; for (let i = 0; i < s.length; i++) h = (h * 31 + s.charCodeAt(i)) | 0;\n  return h >>> 0;\n}\nconst candHash = simpleHash(candidate);\n\n// Thresholds: adjust to be stricter/looser\nconst SIM_THRESH = 0.90; // 0..1 (higher = stricter)\n\nlet tooSimilar = false;\nfor (const prev of past) {\n  const sim = jaroWinkler(candidate, prev);\n  if (sim >= SIM_THRESH || simpleHash(prev) === candHash) {\n    tooSimilar = true; break;\n  }\n}\n\nif (tooSimilar) {\n  // Throwing makes the node fail and lets you loop back to the Agent\n  throw new Error('Theme too similar to a past entry. Regenerate.');\n}\n\n// If it's unique, expose it for saving\nreturn { ...agent, _hash: candHash };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        2448
      ],
      "id": "a43a0ed7-ea4b-4083-8e14-c65598c16651",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fd34a46c-85f5-42a1-a056-cf1108603b6f",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        384,
        2448
      ],
      "id": "48ff6873-795a-417e-9c46-9206967e8373",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Input is many items from Data Store. We output ONE item.\nconst themes = $('Get many database pages').all().map(i => {\n  console.log(i);\n  const t = i.json.name || '';\n  const l = i.json.property_one_liner || '';\n  return `${t} | ${l}`.trim();\n});\nreturn [{ json: { pastThemes: themes } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        2448
      ],
      "id": "6e316f90-1649-4da7-a5f6-1dbec61029ac",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"string\",  \n  \"description\": \"string\",\n  \"image_prompt\": \"string\",  \n  \"video_prompt\": \"string\"     \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -32,
        2672
      ],
      "id": "d012cb94-e242-43f0-a17d-fe6782e263dc",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -752,
        4688
      ],
      "id": "c97f7bc9-fead-4ed1-988c-1cfd41d65611",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "Could spiral into recursion",
        "height": 80,
        "width": 256
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        944,
        1376
      ],
      "id": "887a9acd-c494-44ec-9b81-b6aa41171ebb",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Goal: Create a short, ultra-catchy educational song with lyrics about cosmic fun facts that works on TikTok/Reels. stick to only one funfact throuh the entire songs. You dont have to rhyme that much, keep it simple wording, plain even. Make it really educational and with propper science terminology, I want to learn from this and make people learn from this. I need it to be viral. Needs to rhyme.\n\nInstructions (model-facing):\n\nTopic: {{ $json.property_one_liner }}\n\nAudience & tone: General audience, playful / wonder-filled, kid-safe wording, high intelligibility.\n\nLength: 40–60s total; vocals start at 0s or within 2 bars.\n\nTempo/Key: 140 BPM; C major or A minor (easy to sing on phones).\n\nStructure:\n\nVerse (16 lines): 6–9 syllables, ABAB rhyme.\n\nOutro (1–2 lines): quick summary/tag.\n\nFacts style: Numbers & comparisons (e.g., “Light needs ~8 min from Sun”), records (“largest star…”, “fastest spin…”), simple causes (“why galaxies look redshifted”). No jargon; prefer plain analogies (“size like a city”).\n\nMix notes: Vocal-forward; clear mids for phone speakers; minimal reverb; no busy fills over vocals.\n\nSafety: Keep everything non-scary (no disaster gore), no brand names, no politics.",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -928,
        1680
      ],
      "id": "515f7727-b175-4909-9dc0-ece960a889a0",
      "name": "lyrics clanker",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<aiInstructionRoleBlock>\n  <output>\n    <titleRules>\n      <rule>Length ≤ 99 characters.</rule>\n      <rule>Include 1–3 emojis that match the scene.</rule>\n      <rule>Include 2–4 topical hashtags about the theme.</rule>\n      <rule>Always include: #pokemon #cute #eevee #aiart #shorts</rule>\n      <rule>Readable and clicky; no ALL CAPS spam.</rule>\n    </titleRules>\n\n    <descriptionRules>\n      <rule>1–3 short lines, friendly tone, SFW.</rule>\n      <rule>Mention the specific action and quirky situation.</rule>\n      <rule>Optional single CTA.</rule>\n      <rule>No links, no brand names, no instructions.</rule>\n    </descriptionRules>\n<themeRules>\n  <rule>Consider pastThemes and try to avoid those themes already done.</rule>\n</themeRules>\n  </output>\n\n  <constructionHints>\n    <promptContent>\n      <rule>Obscure but wholesome everyday situation</rule>\n      <rule>Include an explicit action verb (balancing, nudging, sniffing, stacking, whisking).</rule>\n      <rule>Keep it cute/funny; no fear, distress, or impact.</rule>\n      <rule>Prompts need to be valid json. No special characters so I can send it with http request</rule>\n    </promptContent>\n    <imageStyle>\n      <rule>Portrait 9:16 or 3:4; shallow DOF; soft key + gentle rim; crisp fur strands; clean background; no text/logos/watermarks/UI.</rule>\n      <rule>On-model Eevee: expressive eyes, perky ears, small paws, fluffy tail.</rule>\n      <rule>Real-life scale props; scene readable at a glance.</rule>\n    </imageStyle>\n  </constructionHints>\n\n  <templates>\n    <titleTemplate>\n      <![CDATA[\n{emoji1}{emoji2} Eevee {ACTION VERB} {OBSCURE SITUATION}! #{THEME1} #{THEME2} #pokemon #cute #eevee #aiart #shorts\n      ]]>\n    </titleTemplate>\n\n    <descriptionTemplate>\n      <![CDATA[\nEevee {ACTION VERB} in a quirky everyday moment—{ONE-LINE SCENE DETAIL}.\nTiny paws, big focus, maximum cute. {OPTIONAL CTA}\n      ]]>\n    </descriptionTemplate>\n\n    <promptTemplate>\n      <![CDATA[\nUltra photo-real Eevee, life-sized, {MOOD}, {ACTION VERB} in {OBSCURE EVERYDAY SITUATION}, {LOCATION/SETTING}, {TIME OF DAY}. Chest-up or small full-body, shallow DOF, crisp fur strands, glossy eyes with catchlight, delicate whiskers, 2–3 grounded props relevant to the action, soft warm key from camera-left, cool rim from back-right, clean background, subtle film grain, no text/logos/watermarks, single Eevee.\n      ]]>\n    </promptTemplate>\n\n    <videoPromptTemplate engine=\"Veo-3\">\n\n      <![CDATA[\n\"One Eevee only. Tone: cute and clumsy, wholesome, no distress. Scene: {LOCATION/SETTING}, {TIME OF DAY}.\\nProps on set (use provided): {OBJECTS_IN_SCENE}. Eevee’s task (use provided): {WHAT_EEVEE_IS_DOING}.\\n\\nCAMERA: {gentle push-in | slow handheld from 3/4 left | micro-dolly along table}, 50–85mm equivalent, shallow DOF, soft bokeh.\\nLIGHTING: soft warm key from camera-left; cool rim from back-right; practicals allowed.\\n\\nACTION BEATS (cute + clumsy):\\n1) Establish: Eevee notices {PRIMARY OBJECT} and pads closer; tiny sniff, ears perk. A small wobble shows clumsiness.\\n2) Attempt: Eevee {WHAT_EEVEE_IS_DOING}, paws slightly fumble; {SECONDARY OBJECT} wobbles but doesn’t spill; a single crumb/steam puff/tilt sells realism.\\n3) Recovery: Eevee steadies with a paw, blinks wide-eyed, tail flick; proud micro-nod and a tiny second try.\\n\\nMOTION LAYERS:\\n- Subject: small head tilt, paw adjustments, gentle ear/whisker twitch, shy shuffle.\\n- Camera: subtle sway or slow push-in; no whip-pans, no cuts.\\n- Environment: micro steam/dust motes, faint indicator LED blink, cloth edge lifts in airflow.\\n\\nSAFETY & STYLE:\\nNo text/logos/watermarks/humans/other Pokémon/collars. Keep face visible and clean. Realistic fur physics; subtle film grain; cozy cinematic look. Single continuous shot.\"\n      ]]>\n    </videoPromptTemplate>\n  </templates>\n\n<pastThemes>\n  {{ $json.pastThemes }}\n</pastThemes>\n</aiInstructionRoleBlock>\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=  <role>\n    You are a prompt-engineer for an image model. Create a single still-image prompt featuring Eevee in an obscure, everyday situation that is cute, funny, and includes action. Nothing bad happens. Also produce a catchy YouTube Shorts–ready Title and Description for the video we’ll make from this image. Then produce a Veo-3 video prompt describing a short, cute-and-clumsy scene using the provided OBJECTS_IN_SCENE and WHAT_EEVEE_IS_DOING.\n  </role>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -240,
        2448
      ],
      "id": "df3e0a4b-71ae-4ad0-8ce5-58958fa496c8",
      "name": "Theme clanker"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.sunoapi.org/api/v1/generate",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "=VERSE:{{ $('lyrics clanker').item.json.output.verse }}\n\nCHORUS: {{ $('lyrics clanker').item.json.output.chorus }}\n\nOUTRO: {{ $('lyrics clanker').item.json.output.outro }}\n\nHOOK: {{ $('lyrics clanker').item.json.output.hook }}\n\n"
            },
            {
              "name": "style",
              "value": "Electro spoken-word fast paced, 140 BPM, A minor. No intro—voice at 2s. Neutral Female, spoken to rap singing cadence. !!LENGTH:60s!! Minimal palette (side-chained pads, clean kick, sub, airy plucks). Vocal-forward; avoid autotune artifacts and dense fills."
            },
            {
              "name": "title",
              "value": "={{ $('lyrics clanker').item.json.output.title }}"
            },
            {
              "name": "customMode",
              "value": "true"
            },
            {
              "name": "instrumental",
              "value": "false"
            },
            {
              "name": "model",
              "value": "V4_5"
            },
            {
              "name": "negativeTags",
              "value": "long intro,instrumental intro,delayed vocals,autotune,heavy reverb,dense fills,busy percussion,vocoder,distortion,glitch fx, tempo changes,choir"
            },
            {
              "name": "vocalGender",
              "value": "f"
            },
            {
              "name": "styleWeight",
              "value": "0.80"
            },
            {
              "name": "weirdnessConstraint",
              "value": "0.35"
            },
            {
              "name": "audioWeight",
              "value": "0.65"
            },
            {
              "name": "callBackUrl",
              "value": "https://api.example.com/callback"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -112,
        4256
      ],
      "id": "e7ca52c4-b0ad-4269-86b8-f924cca88095",
      "name": "Request create song",
      "credentials": {
        "httpBearerAuth": {
          "id": "flynbMcZ320tP6Xq",
          "name": "Suno bear"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "inputDataFieldName": "song",
        "name": "=song-{{ $now.format('yyyy-MM-dd-HH:mm:ss') }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1u3NLKJAZekpnEeDKfbFDMttdxeWoCRzv",
          "mode": "list",
          "cachedResultName": "songs",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1u3NLKJAZekpnEeDKfbFDMttdxeWoCRzv"
        },
        "options": {
          "appPropertiesUi": {
            "appPropertyValues": [
              {}
            ]
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1232,
        4256
      ],
      "id": "e7d6a94c-a172-4490-9a5d-0f0c12324ba0",
      "name": "Upload file1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ih6pau2KBlXO6pNC",
          "name": "Google Drive account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "https://drive.google.com/file/d/1KxUYCr2M-2LkgOkhha7d0bNqcruW3-L-/view?usp=drive_link",
          "mode": "url"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -976,
        2112
      ],
      "id": "f23a0ab3-2c35-48a7-9b32-3c9acb0a7e11",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ih6pau2KBlXO6pNC",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.audioUrl1 }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "song"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        4256
      ],
      "id": "3049c5d4-a841-40fd-be24-c70454b5460d",
      "name": "Download songs",
      "credentials": {
        "httpBearerAuth": {
          "id": "flynbMcZ320tP6Xq",
          "name": "Suno bear"
        }
      },
      "disabled": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        -624,
        4688
      ],
      "id": "a997e23d-4a01-48f9-b07b-febe452ec3dd",
      "name": "Think"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        -848,
        1904
      ],
      "id": "55d62c9b-4ce0-499d-9c32-34765bc527b6",
      "name": "Think1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "b1375017-f7b6-4d31-ae40-896fb8c5e5b1",
      "name": "OpenAI Chat Model4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -112,
        5440
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "id": "704bbf3b-e906-43ed-9058-3afd693f8d99",
      "name": "Think3",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        16,
        5440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"string\",\n  \"final_prompt\": \"string\"\n}\n"
      },
      "id": "dfc52aa5-bc74-407f-872d-513f9d998387",
      "name": "Structured Output Parser4",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        144,
        5440
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a45483d1-d215-4880-a67d-ed66367769c0",
              "name": "json_master",
              "value": "={   \"title\": \"<Project name>\",   \"goal\": \"Teach one fun science fact in a friendly, kid-safe way while the mascot host sings to the final song. No on-screen captions.\",   \"format\": {     \"platform\": \"TikTok / Reels\",     \"aspect_ratio\": \"9:16\",     \"resolution\": \"1080x1920\",     \"fps\": 24,     \"duration_sec\": <40-60>   },   \"assets\": {     \"audio_url\": \"<https link to final song>\",     \"reference_image_url\": \"<https link to host image>\"   },   \"scene_summary\": \"Soft sci-fi lab; cozy, bright, and clean. The cute lab-mascot explains a single science fact with simple gestures and bouncy timing.\",   \"style\": \"cute, cinematic, soft light, shallow depth of field, playful, wholesome\",   \"camera\": {     \"type\": \"steadicam/dolly\",     \"movement\": \"gentle push-ins and micro orbits synced to downbeats\",     \"lens\": \"50–85mm portrait feel\"   },   \"lighting\": {     \"type\": \"soft + rim\",     \"sources\": \"warm key from camera-left, cyan rim from back-right, practical lab glows\",     \"fx\": \"subtle bokeh, very light volumetrics\"   },   \"environment\": {     \"location\": \"friendly futuristic lab\",     \"set_pieces\": [\"benches with soft cyan lights\", \"cute glass beakers\", \"tiny hologram panel\"],     \"mood\": \"clean, upbeat, curious\"   },   \"subject\": {     \"host\": {       \"description\": \"adorable lab-mascot with big bright eyes, fluffy collar, white lab coat with colorful pens\",       \"pose\": \"open posture, small head bops, enthusiastic paw gestures\",       \"identity_lock\": \"must match reference_image_url across all shots\"     }   },   \"learning_goal\": \"One clear takeaway in one sentence (kid-safe wording).\",   \"lyrics_input\": \"<paste raw lyrics here>\",   \"beat_map\": [     { \"t_start\": 0.00, \"t_end\": 2.20, \"lyric\": \"<line 1>\", \"syllables\": 6 },     { \"t_start\": 2.20, \"t_end\": 4.60, \"lyric\": \"<line 2>\", \"syllables\": 7 }   ],   \"shots\": [     {       \"id\": \"S1\",       \"t_start\": 0.00,       \"t_end\": 3.00,       \"purpose\": \"Meet the host; start the hook\",       \"framing\": \"medium close-up\",       \"camera\": \"gentle push-in\",       \"action\": \"host smiles, inhales subtly, starts singing; paw pops on first downbeat\",       \"lip_sync_to\": [0],       \"veo_prompt\": \"Vertical 9:16. Cute lab-mascot matching the reference image sings in a softly lit futuristic lab. Realistic fur, glossy eyes, shallow DOF, cyan accents, gentle push-in. No text, no watermarks.\"     },     {       \"id\": \"S2\",       \"t_start\": 3.00,       \"t_end\": 6.00,       \"purpose\": \"Teach the core fact beat\",       \"framing\": \"tight close-up\",       \"camera\": \"locked with micro handheld breathing\",       \"action\": \"mouth shapes AA/EE on stressed syllables; head bop on beats; quick glance to tiny hologram\",       \"lip_sync_to\": [1],       \"veo_prompt\": \"Close-up of the same mascot with precise lip-sync, cyan rim light, soft key, shallow DOF. No text.\"     }   ],   \"motion\": {     \"type\": \"playful gestures + small hologram cutaways\",     \"details\": \"on emphasized words, a tiny lab hologram blips on/off; subtle paw arcs timed to downbeats\"   },   \"vfx\": {     \"hologram\": \"soft cyan HUD elements that appear briefly (no readable text)\",     \"particles\": \"very light dust motes in the bokeh\"   },   \"audio\": {     \"music\": \"use provided song only\",     \"sfx\": [\"soft woosh on camera push\", \"tiny blip when hologram appears\"],     \"ambience\": \"low room tone\",     \"lip_sync\": \"strong; map visemes (MBP, EE, OH, FV) to lyric phonemes; align to beat_map\"   },   \"ending\": \"Host lands on a cute smile + tiny paw wave; quick 0.4s hold; fade out audio tail.\",   \"safety_and_rules\": [     \"no on-screen text or captions\",     \"brand-safe, kid-safe\",     \"keep host identity consistent with reference image\",     \"no logos/watermarks beyond platform defaults\"   ],   \"keywords\": [\"cute\", \"educational\", \"mascot\", \"science fact\", \"soft sci-fi lab\", \"vertical video\"] }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -976,
        4464
      ],
      "id": "7498f052-6830-4e23-a571-86b0b9670719",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1008,
        4800
      ],
      "id": "e187938d-de45-495c-b719-2bdff899d731",
      "name": "Wait",
      "webhookId": "1c427600-ac0c-4f7c-8f6c-c9fa999f472d",
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://api.kie.ai/api/v1/veo/record-info",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{ $json.data.taskId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1232,
        4720
      ],
      "id": "a6b8c539-4ef8-4f28-a20a-968eeb45efca",
      "name": "HTTP Request2",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "534dab23-0283-4363-8adf-fe3bf721ab73",
              "leftValue": "={{ $json.data.successFlag }}",
              "rightValue": "0",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1456,
        4800
      ],
      "id": "4edac245-d177-460d-b9dd-83365e34fccd",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "const structuredPrompt = $input.first().json.output.final_prompt;\nreturn {\n  json: {\n    prompt: JSON.stringify(structuredPrompt), // this escapes it correctly!\n    model: \"veo3_fast\",\n    aspectRatio: \"9:16\"\n  }\n}\n"
      },
      "id": "5767bc6b-e829-4552-a6cc-d6579c20bf0a",
      "name": "Format Prompt",
      "type": "n8n-nodes-base.code",
      "position": [
        352,
        5312
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://kieai.redpandaai.co/api/file-url-upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "fileUrl",
              "value": "drive.google.com/uc?export=download&id=1KaY5aIfDSLle062iYli6xN8tnwE2q94s"
            },
            {
              "name": "uploadPath",
              "value": "images/downloaded"
            },
            {
              "name": "fileName",
              "value": "=my-downloaded-image-{{$now.format('yyyy-MM-dd-HH-mm-ss')}}.png"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -976,
        1232
      ],
      "id": "acb5af24-081d-42ae-8bc5-3a74f8b28a98",
      "name": "HTTP Request3",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "url": "https://drive.google.com/uc?export=download&id=1KaY5aIfDSLle062iYli6xN8tnwE2q94s",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -112,
        4896
      ],
      "id": "40181e08-3490-4ce7-8b0b-f24848117e7a",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  console.log(item.binary)\n}\n\n\n// Converts item.binary.data -> base64 and stores it in item.json.base64\n// Also adds a data: URL for convenience.\nreturn $input.all().map(item => {\n  const binProp = 'data'; // change if your binary prop is named differently\n  const buf = item.binary.data;\n\n  const mime =\n    (item.binary?.[binProp]?.mimeType) ||\n    'application/octet-stream';\n\n  item.json = {\n    ...item.json,\n    buf,\n    fileName: item.binary?.[binProp]?.fileName || 'file.bin',\n    mimeType: mime,\n  };\n\n  return buf;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        4896
      ],
      "id": "3e1a1f91-61ab-4f2f-8638-85b2acc0d961",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1904,
        4704
      ],
      "id": "9634e4fa-28f4-47e8-b94c-89ecb037ce99",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a076f882-1a40-4aca-8cf2-318b031fdb4f",
              "leftValue": "={{ $json.msg }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        784,
        4896
      ],
      "id": "1d470c66-be56-44a2-b4b6-cd80a7f395de",
      "name": "If2"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "846456961419444304",
          "mode": "list",
          "cachedResultName": "Tomasiknos diary",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304"
        },
        "channelId": {
          "__rl": true,
          "value": "1417600388479189136",
          "mode": "list",
          "cachedResultName": "videos-notification",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304/1417600388479189136"
        },
        "content": "Sending request to create video failed, check logs\n",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1008,
        4992
      ],
      "id": "ff83eb4e-e50e-4174-b8fc-2370df451f43",
      "name": "Send a message",
      "webhookId": "a5e9ccdf-bf91-4288-aaa2-d7abc19df00e",
      "credentials": {
        "discordBotApi": {
          "id": "kODEUwvmo26ApL4g",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://kieai.redpandaai.co/api/file-base64-upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "base64Data",
              "value": "={{$json.data}}"
            },
            {
              "name": "uploadPath",
              "value": "images/base64"
            },
            {
              "name": "fileName",
              "value": "=test-image{{$now.format('yyyy-MM-dd-ss:mm')}}.png"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        336,
        4896
      ],
      "id": "eb78dd1f-b05e-4cf1-93dc-a39bff620f11",
      "name": "Upload image to kei",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/veo/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"prompt\": {{ $('Format Prompt').item.json.prompt }},\n  \"imageUrls\": [\n    \"{{ $json.data.downloadUrl }}\"\n  ],\n  \"model\": \"{{ $('Format Prompt').item.json.model }}\",\n  \"watermark\": \"EeveesSongs\",\n  \"callBackUrl\": \"http://your-callback-url.com/complete\",\n  \"aspectRatio\": \"{{ $('Format Prompt').item.json.aspectRatio }}\",\n  \"seeds\": {{ Math.floor(Math.random() * 90000) + 10000 }},\n  \"enableFallback\": false,\n  \"enableTranslation\": true\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        4896
      ],
      "id": "4c21da4b-0c7d-40b2-97f1-4862c1d44ebb",
      "name": "Post request to generate video",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "276822ad-b580-4a8c-b893-99eae452add9",
              "leftValue": "={{ $json.data.successFlag }}",
              "rightValue": "1",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1680,
        4800
      ],
      "id": "f5913901-7a20-452d-a4cc-8185272737e4",
      "name": "If3"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "846456961419444304",
          "mode": "list",
          "cachedResultName": "Tomasiknos diary",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304"
        },
        "channelId": {
          "__rl": true,
          "value": "1417600388479189136",
          "mode": "list",
          "cachedResultName": "videos-notification",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304/1417600388479189136"
        },
        "content": "Video generation failes. Check logs.",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1904,
        4896
      ],
      "id": "647c6bdc-a756-4f23-9f21-e3ced69174ac",
      "name": "Send a message1",
      "webhookId": "1804d12e-d556-4303-9ef1-22454882cf6f",
      "credentials": {
        "discordBotApi": {
          "id": "kODEUwvmo26ApL4g",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create a UGC-style video prompt using both the reference image and the user description.  \n\n**Inputs**  \n- User description (optional):  \n  `{{ $('Theme clanker').item.json.output.one_liner }}`  \n- Reference image analysis (stay strictly faithful to what’s visible):  \n  `https://drive.google.com/file/d/1KaY5aIfDSLle062iYli6xN8tnwE2q94s/view?usp=drive_link`  \n\n**Rules**  \n- Keep the style casual, authentic, and realistic. Avoid studio-like or cinematic language.  \n- Default model: `veo3_fast` (unless otherwise specified).  \n- Output only **one JSON object** with the key: `video_prompt`.  \n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=system_prompt:\n  ## SYSTEM PROMPT: Structured Video Ad Prompt Generator\n  A - Ask:\n    Generate a structured video ad prompt for cinematic generation, strictly based on the master schema provided in: {{ $json.json_master }}\n\n    The final result must be a JSON object with exactly two top-level keys: `title` and `final_prompt`.\n\n  G - Guidance:\n    role: Creative Director\n    output_count: 1\n    character_limit: None\n    constraints:\n      - The output must be valid JSON.\n      - The `title` field should contain a short, descriptive and unique title (max 15 words).\n      - The `final_prompt` field must contain a **single-line JSON string** that follows the exact structure of {{ $json.json_master }} with all fields preserved.\n      - Do not include any explanations, markdown, or extra text — only the JSON object.\n      - Escape all inner quotes in the `final_prompt` string so it is valid as a stringified JSON inside another JSON.\n    tool_usage:\n      - Ensure consistent alignment across all fields (camera, lighting, motion, etc.).\n      - Maintain full structure even for optional fields (use \"none\", \"\", or [] as needed).\n\n  N - Notation:\n    format: JSON\n    expected_output:\n      {\n        \"title\": \"A unique short title for the scene\",\n        \"final_prompt\": \"{...stringified JSON of the full prompt...}\"\n      }\n\n"
        }
      },
      "id": "4b59fe11-5415-4a91-bae6-84d36b5d0e2b",
      "name": "Generate Video Script Clanker",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -48,
        5216
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.shotstack.io/edit/stage/render",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "ptmpOiyKgGYMnnONwvXH7FHzDGOazrIjaEDUS7Cf"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "@hello.json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2128,
        4704
      ],
      "id": "8c1f198a-74a0-4bfd-8cba-523963ae6dc6",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Role:\nYou are a senior video prompt-engineer for Google Veo 3. Create a short-form, sings to a supplied lyrics. You must: 1) turn the lyrics into a tight shot plan, 2) align visuals lyrics, and 3) output VEO-3 ready prompts (no on-screen text).\n\nInputs:\nTITLE: {{ $('lyrics clanker').item.json.output.title }}\n\nLYRICS: \nVERSE: {{ $('lyrics clanker').item.json.output.verse }}\nCHORUS: {{ $('lyrics clanker').item.json.output.chorus }}\nOUTRO: {{ $('lyrics clanker').item.json.output.outro }}\nHOOK: {{ $('lyrics clanker').item.json.output.hook }}\n\n\nTARGET_DURATION_SEC: 60s\n\nBPM: 140\n\nCreative direction (apply):\n\nFormat: 9:16 vertical, TikTok/Reels ready, no captions/subtitles/watermarks.\n\nSet: soft sci-fi lab (cool practical lights + soft key light, shallow depth of field).\n\nCamera grammar: mostly mid-shots & close-ups; add tasteful push-ins, gentle dolly, occasional over-the-shoulder to holograms or props that are relevant to the lyrics.\n\nColor: clean neutrals with cyan highlights; skin/fur natural; no harsh saturation.\n\nMotion: smooth, rhythmic to the beat; micro-gestures, head bobs, paw/hand cues.\n\nAbsolutely no on-screen text (lyrics, titles, lower-thirds).\n\nSafe for work.\n\nAudio & lip-sync (enforce):\n\nUse AUDIO_URL for audio conditioning / timing.\n\nStrong lip-sync; map visemes (AA, EE, OH, FV, MBP) to word phonemes.\n\nIf no per-word timing is available, estimate from BPM and syllable counts.",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -704,
        4464
      ],
      "id": "69f7078c-cda9-4408-b86c-0b3a40cb0703",
      "name": "Video script timing clanker",
      "retryOnFail": true,
      "maxTries": 2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "id": "8109190e-cda1-4958-805d-99b8b77a20aa",
      "name": "OpenAI Chat Model5",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        96,
        3504
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "id": "5af9c9ac-fdd4-4a87-a378-0a7d576994df",
      "name": "Think4",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        208,
        3456
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"string\",\n  \"final_prompt\": \"string\"\n}\n"
      },
      "id": "07d0026d-92ba-4f4b-ad31-3e9eb9a26824",
      "name": "Structured Output Parser5",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        336,
        3440
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a senior prompt-engineer for Google VEO-3. Produce a short-form vertical video prompt for a single image input, preserving visual continuity (subject, styling, props). Output one cohesive prompt (no on-screen text). Final prompt should include mention of eevee sounds and music in the background. Eevee should be active and not standing around.\n\n\nContinuity: Match Eevee’s look, realistic fur, lighting vibe, LOCATION, props, and time-of-day indicated in image.\n\nEevee notices the one of the OBEJCTS infront of her and plays with it or pushes it away or reacts in cute/funny way or uses it for her entertainment or bites it or topples it. There needs to be action. Eevee is a clumsy and curious creature. Prioritize Eevee pushing objects/toppling and playing with objects. Could use the objects if possible to kick out of frame. There needs to be interaction with the objects and it needs to be cute.\n\nGlobal constraints\n\nHyper-adorable, wholesome. Contact with object.\nSubject: Eevee faces camera; Eevee should make cute Eevee to fox like like noises (ee, eev, vee). Quiet chill song in the background\nReal-world physics; life-sized; LOCATION must be plausible.\nCamera can move throu the space like someone is recording her for home video, so not a proffesional camera. Output needs to be json ready. No empty lines and special chars.\n\nInputs\n\nMOOD: {{ $('Theme clanker').item.json.output.mood }}\nOBEJCTS: {{ $('Theme clanker').item.json.output.objects_in_scene }}\nWHAT_EEVEE_IS_DOING:{{ $('Theme clanker').item.json.output.what_eevee_is_doing }}\nSTYLE (fallback if missing): cute, cinematic, soft light, cozy, colorful, glossy highlights, airy, high key, natural materials, filmic grain, studio rim light, warm tones, gentle bloom, realistic fur.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "="
        }
      },
      "id": "c3a01db8-cff4-4c2b-a0b6-8d8a33763d07",
      "name": "Generate Video Script Clanker1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        96,
        3248
      ],
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/jobs/createTask",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"google/nano-banana\",\n  \"callBackUrl\": \"https://your-domain.com/api/callback\",\n  \"input\": {\n    \"prompt\": \"{{ $('Theme clanker').item.json.output.image_prompt }}\",\n    \"output_format\": \"png\",\n    \"image_size\": \"9:16\"\n  }\n}",
        "options": {}
      },
      "id": "22219817-d1a7-4997-924d-71129b0b3ee7",
      "name": "NanoBanana: Create Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        832,
        2448
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "foWS03OsC9HJFKQs",
          "name": "Gemini"
        },
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "amount": 15
      },
      "id": "4688b83a-e094-41f2-a732-5d450bce0597",
      "name": "Wait for Image Edit",
      "type": "n8n-nodes-base.wait",
      "position": [
        1056,
        2448
      ],
      "webhookId": "df52d997-45c4-431f-bdf6-89dd25027b5b",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "https://api.kie.ai/api/v1/jobs/recordInfo",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{ $json.data.taskId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "72f78518-4216-44b1-b8ee-4b9144cf939d",
      "name": "Download Edited Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1280,
        2368
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "foWS03OsC9HJFKQs",
          "name": "Gemini"
        },
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "name": "=eevee-img-{{ $('NanoBanana: Create Image').item.json.data.taskId }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1u3NLKJAZekpnEeDKfbFDMttdxeWoCRzv",
          "mode": "list",
          "cachedResultName": "songs",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1u3NLKJAZekpnEeDKfbFDMttdxeWoCRzv"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -720,
        2960
      ],
      "id": "270347d9-370b-4b60-8e63-4733a68c2b03",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ih6pau2KBlXO6pNC",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://kieai.redpandaai.co/api/file-base64-upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "base64Data",
              "value": "={{ $('Code in JavaScript5').item.json.data.data }}"
            },
            {
              "name": "uploadPath",
              "value": "images/base64"
            },
            {
              "name": "fileName",
              "value": "=test-image{{$now.format('yyyy-MM-dd-ss-mm')}}.png"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -288,
        2960
      ],
      "id": "9c567528-a84b-4f0e-b6de-3111884cd7b7",
      "name": "Upload image to kei1",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\n// Converts item.binary.data -> base64 and stores it in item.json.base64\n// Also adds a data: URL for convenience.\nreturn .map(item => {\n  const binProp = 'data'; // change if your binary prop is named differently\n  const buf = item.binary.data;\n\n  const mime =\n    (item.binary?.[binProp]?.mimeType) ||\n    'application/octet-stream';\n\n  let newItem = {\n    ...item.json,\n    buf,\n    fileName: item.binary?.[binProp]?.fileName || 'file.bin',\n    mimeType: mime,\n  };\n\n  return newItem;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        4480
      ],
      "id": "424964b1-d9f3-443b-9045-90777f30a793",
      "name": "Code in JavaScript3",
      "disabled": true
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        768,
        2864
      ],
      "id": "d162dbbb-7949-4f71-8a41-15af062c7f81",
      "name": "Wait1",
      "webhookId": "1c427600-ac0c-4f7c-8f6c-c9fa999f472d"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "534dab23-0283-4363-8adf-fe3bf721ab73",
              "leftValue": "={{ $json.data.successFlag }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1216,
        2864
      ],
      "id": "2adc4b2c-2a4b-4088-8152-5d626572e73c",
      "name": "If4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a076f882-1a40-4aca-8cf2-318b031fdb4f",
              "leftValue": "={{ $json.msg }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        544,
        2960
      ],
      "id": "c8d1a4a3-8470-4a32-b51a-fa2137e58560",
      "name": "If5"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "846456961419444304",
          "mode": "list",
          "cachedResultName": "Tomasiknos diary",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304"
        },
        "channelId": {
          "__rl": true,
          "value": "1417600388479189136",
          "mode": "list",
          "cachedResultName": "videos-notification",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304/1417600388479189136"
        },
        "content": "Sending request to create video failed, check logs\n",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        768,
        3056
      ],
      "id": "9f2ce18a-f6c6-4d26-bfc9-3f35fbcf572e",
      "name": "Send a message2",
      "webhookId": "a5e9ccdf-bf91-4288-aaa2-d7abc19df00e",
      "credentials": {
        "discordBotApi": {
          "id": "kODEUwvmo26ApL4g",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "276822ad-b580-4a8c-b893-99eae452add9",
              "leftValue": "={{ $json.data.successFlag }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1440,
        2864
      ],
      "id": "bd295354-36d7-4fb8-a426-58f2cc17b483",
      "name": "If6"
    },
    {
      "parameters": {
        "url": "={{ $('Download Edited Image').item.json.data.resultJson.parseJson().resultUrls[0] }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2272,
        2592
      ],
      "id": "6bc47382-2cd7-435c-81b8-74c3d75690b4",
      "name": "Dowload nano banana image from kei",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.data.response.resultUrls[0] }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1664,
        2864
      ],
      "id": "e3e872f3-a69e-4571-beeb-9cafe7f02b1d",
      "name": "Request video info",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "NYWE2eTlJYQ0WPTb",
          "mode": "list",
          "cachedResultName": "Automate Video Content Posting to Multiple Social Platforms with Postiz"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.name }}",
            "videoId": "={{ $json.id }}",
            "prompt": "={{ $('Theme clanker').item.json.output.video_prompt }}",
            "videoTitle": "={{ $('Theme clanker').item.json.output.title }}",
            "videoDesc": "={{ $('Theme clanker').item.json.output.description }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "tags",
              "displayName": "tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": true
            },
            {
              "id": "prompt",
              "displayName": "prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "videoId",
              "displayName": "videoId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "videoTitle",
              "displayName": "videoTitle",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "videoDesc",
              "displayName": "videoDesc",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2112,
        2864
      ],
      "id": "7907ba5f-3943-4012-859f-7725f77f9991",
      "name": "Call 'Automate Video Content Posting to Multiple Social Platforms with Postiz'"
    },
    {
      "parameters": {
        "name": "=Eeveevideo-{{ $json.data.response.taskId }}.mp4",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1tnJQGapWf8ZHzSTTJ3KzVXaq5jRAsHf9",
          "mode": "list",
          "cachedResultName": "videos",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1tnJQGapWf8ZHzSTTJ3KzVXaq5jRAsHf9"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1888,
        2864
      ],
      "id": "6fda237f-1d92-4b7f-8ca6-53b32375dc4d",
      "name": "Upload video",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ih6pau2KBlXO6pNC",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -976,
        1456
      ],
      "id": "6abbe608-f0ec-45df-855f-2a4d222335e0",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => ({\n  json: { ...item.json, data: item.binary.data },\n  binary: item.binary ?? {}\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        2960
      ],
      "id": "39832b38-e901-4fe8-918e-f1b4b8793063",
      "name": "Code in JavaScript5"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "mode": "list",
          "cachedResultName": "Themes",
          "cachedResultUrl": "https://www.notion.so/27358cd71b1580e5965fd144b72c15b4"
        },
        "limit": 10,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -768,
        2448
      ],
      "id": "03188629-3bd1-4b73-9741-bf24b2e18ed7",
      "name": "Get many database pages",
      "credentials": {
        "notionApi": {
          "id": "lDq6KxxGETipZmXY",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function fnv1a(str){let h=0x811c9dc5;for(let i=0;i<str.length;i++){h^=str.charCodeAt(i);h=(h>>>0)*0x01000193;}return (h>>>0);}\nreturn $input.all().map(item => ({\n  json: { ...item.json, id: fnv1a((item.json.text ?? 'hello world')).toString(36), data: item.binary.data },\n  binary: item.binary ?? {}\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -752,
        1456
      ],
      "id": "7af06d5b-35ba-43e8-8b61-f693e98917ee",
      "name": "Code in JavaScript4"
    },
    {
      "parameters": {
        "inputDataFieldName": "=data",
        "name": "={{ $json.id }}.json",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1UshlYoqe8MOV28CsUVPNpemhPIHkWeee",
          "mode": "list",
          "cachedResultName": "ids",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1UshlYoqe8MOV28CsUVPNpemhPIHkWeee"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -528,
        1456
      ],
      "id": "cdca4a36-da9b-46f5-9a7e-20b563788047",
      "name": "Upload file2",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ih6pau2KBlXO6pNC",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/veo/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"prompt\":\"{{ JSON.stringify($('Theme clanker').item.json.output.video_prompt)}}\",\n  \"imageUrls\": [\n    \"{{ $('Upload image to kei1').item.json.data.downloadUrl }}\"\n  ],\n  \"model\": \"veo3_fast\",\n  \"watermark\": \"EeveesSongs\",\n  \"callBackUrl\": \"http://your-callback-url.com/complete\",\n  \"aspectRatio\": \"9:16\",\n  \"seeds\": {{ Math.floor(Math.random() * 90000) + 10000 }},\n  \"enableFallback\": false,\n  \"enableTranslation\": true\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        2960
      ],
      "id": "8bba5e9a-2fab-47df-a6f6-379daa93bbf7",
      "name": "Post request to generate video1",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        -176,
        2672
      ],
      "id": "8efc5615-30b9-49ca-93e4-eb12e2f6ab49",
      "name": "Think2"
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "sendAndWait",
        "guildId": {
          "__rl": true,
          "value": "846456961419444304",
          "mode": "list",
          "cachedResultName": "Tomasiknos diary",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304"
        },
        "channelId": {
          "__rl": true,
          "value": "1417600388479189136",
          "mode": "list",
          "cachedResultName": "videos-notification",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304/1417600388479189136"
        },
        "message": "=📹 **New Video Concept Created!**  \n👉 [{{ $('Theme clanker').item.json.output.title }}]({{ $json.data.resultJson.parseJson().resultUrls }})  \n{{ $json.data.resultJson.parseJson().resultUrls }}\nDo you approve? ✅❌\n------------------------",
        "approvalOptions": {
          "values": {
            "approvalType": "double"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1728,
        2448
      ],
      "id": "9a68dcf3-b98b-4202-a1f2-ef58a6f21826",
      "name": "Send message and wait for response",
      "webhookId": "c783b4c9-cfd5-48a3-8182-e749b01daf93",
      "credentials": {
        "discordBotApi": {
          "id": "kODEUwvmo26ApL4g",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "209f3354-931f-46a0-8b8e-10b2337200ce",
              "leftValue": "={{ $json.data.approved }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1936,
        2448
      ],
      "id": "f3b1f9ec-6ca0-4d86-bc3d-e1359ff52a5b",
      "name": "If7"
    },
    {
      "parameters": {
        "url": "https://api.kie.ai/api/v1/veo/record-info",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{ $json.data.taskId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        2784
      ],
      "id": "47c136a1-c757-4479-b04b-651849b21faa",
      "name": "Check video status",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5d8cacba-15ca-4a89-b063-d3093d9818b0",
              "leftValue": "={{ $json.data.state }}",
              "rightValue": "generating",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "65fe8425-8fd0-4642-8aaf-11ea5401d223",
              "leftValue": "={{ $json.data.state }}",
              "rightValue": "waiting",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1504,
        2448
      ],
      "id": "a0aede51-868a-4116-8b99-519e723dd5cf",
      "name": "is image generating"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code node (JavaScript)\n * Validates and attempts to \"make JSON valid\" from a string.\n * Input per item: item.json.input (preferred) or item.json.text\n * Output per item:\n * {\n *   ok: boolean,\n *   parsed?: object,\n *   fixedText?: string,      // pretty JSON\n *   error?: string,          // parse error\n *   errorContext?: { pos, snippet, pointer }\n * }\n */\n\nfunction stripBOM(s) {\n  if (!s) return s;\n  return s.charCodeAt(0) === 0xFEFF ? s.slice(1) : s;\n}\n\nfunction removeComments(s) {\n  // remove // line comments and /* block comments */\n  return s\n    .replace(/\\/\\/[^\\n\\r]*/g, '')\n    .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n}\n\nfunction replaceSmartQuotes(s) {\n  const map = {\n    '\\u201C': '\"', '\\u201D': '\"', // “ ”\n    '\\u201E': '\"', '\\u201F': '\"',\n    '\\u2018': \"'\", '\\u2019': \"'\", // ‘ ’\n    '\\u201A': \"'\", '\\u2032': \"'\", // ′\n    '\\u2033': '\"'\n  };\n  return s.replace(/[\\u201C\\u201D\\u201E\\u201F\\u2018\\u2019\\u201A\\u2032\\u2033]/g, ch => map[ch] || ch);\n}\n\nfunction removeTrailingCommas(s) {\n  // ,] or ,}  -> ] or }\n  return s.replace(/,\\s*([}\\]])/g, '$1');\n}\n\nfunction quoteBareKeys(s) {\n  // Turns {a:1, b_c:2, \"d-e\":3} into {\"a\":1, \"b_c\":2, \"d-e\":3}\n  // Only in object contexts following { or ,\n  return s.replace(/([{\\s,])([A-Za-z_][\\w-]*)(\\s*):/g, (m, p1, key, p3) => {\n    // Don't double-quote already quoted keys\n    if (key.startsWith('\"') || key.startsWith(\"'\")) return m;\n    return `${p1}\"${key}\"${p3}:`;\n  });\n}\n\nfunction singleToDoubleQuotes(s) {\n  // Convert single-quoted strings to double-quoted, handling escaped single quotes\n  // This is heuristic; avoids touching JSON inside already double-quoted segments\n  return s.replace(/'([^'\\\\]*(\\\\.[^'\\\\]*)*)'/g, (m, inner) => {\n    const doubled = inner.replace(/\\\\'/g, \"'\").replace(/\"/g, '\\\\\"');\n    return `\"${doubled}\"`;\n  });\n}\n\nfunction normalizeNewlines(s) {\n  return s.replace(/\\r\\n?/g, '\\n');\n}\n\nfunction tryParseJSON(text) {\n  try {\n    return { ok: true, value: JSON.parse(text) };\n  } catch (e) {\n    return { ok: false, error: e };\n  }\n}\n\nfunction caretContext(s, pos, windowSize = 80) {\n  const start = Math.max(0, pos - windowSize);\n  const end = Math.min(s.length, pos + windowSize);\n  const snippet = s.slice(start, end);\n  const pointer = ' '.repeat(pos - start) + '^';\n  return { pos, snippet, pointer };\n}\n\nfunction parseErrorPosition(errMsg) {\n  // Chrome/V8: \"Unexpected token ... in JSON at position 123\"\n  const m = /position\\s+(\\d+)/i.exec(errMsg || '');\n  return m ? parseInt(m[1], 10) : null;\n}\n\nfunction sanitizeToJSON(text) {\n  let s = String(text ?? '');\n  s = stripBOM(s);\n  s = normalizeNewlines(s);\n  s = replaceSmartQuotes(s);\n  s = removeComments(s);\n  s = s.trim();\n\n  // Quick try first\n  let res = tryParseJSON(s);\n  if (res.ok) return { ok: true, parsed: res.value, fixedText: JSON.stringify(res.value, null, 2) };\n\n  // Heuristic fixes\n  s = quoteBareKeys(s);\n  s = singleToDoubleQuotes(s);\n  s = removeTrailingCommas(s);\n\n  res = tryParseJSON(s);\n  if (res.ok) return { ok: true, parsed: res.value, fixedText: JSON.stringify(res.value, null, 2) };\n\n  // Final attempt: if looks like array/object but missing a closing bracket, try to balance\n  const opens = (s.match(/{/g) || []).length;\n  const closes = (s.match(/}/g) || []).length;\n  const openB = (s.match(/\\[/g) || []).length;\n  const closeB = (s.match(/]/g) || []).length;\n  let s2 = s + '}'.repeat(Math.max(0, opens - closes)) + ']'.repeat(Math.max(0, openB - closeB));\n\n  if (s2 !== s) {\n    res = tryParseJSON(s2);\n    if (res.ok) return { ok: true, parsed: res.value, fixedText: JSON.stringify(res.value, null, 2) };\n  }\n\n  // Failed: report context\n  const errMsg = (res.error && res.error.message) ? res.error.message : 'Invalid JSON';\n  const pos = parseErrorPosition(errMsg) ?? 0;\n  const ctx = caretContext(s, pos);\n  return { ok: false, error: errMsg, errorContext: ctx, fixedText: s };\n}\n\n// Process each incoming item\nconst out = [];\n\nfor (const item of $()) {\n  const src = item.json?.input ?? item.json?.text ?? null;\n\n  if (typeof src !== 'string') {\n    // If no string provided, pass through original JSON\n    out.push({\n      json: {\n        ok: true,\n        parsed: item.json,\n        fixedText: JSON.stringify(item.json ?? {}, null, 2),\n        note: 'No string provided; passed through original item.json'\n      }\n    });\n    continue;\n  }\n\n  const result = sanitizeToJSON(src);\n\n  // Optionally attach the parsed object as fields for downstream nodes\n  if (result.ok) {\n    out.push({\n      json: {\n        ok: true,\n        parsed: result.parsed,\n        fixedText: result.fixedText\n      }\n    });\n  } else {\n    out.push({\n      json: {\n        ok: false,\n        error: result.error,\n        errorContext: result.errorContext,\n        fixedText: result.fixedText\n      }\n    });\n  }\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        3232
      ],
      "id": "3ad19b84-4dbb-4b8d-8d9a-2bf991785ff5",
      "name": "validate json"
    }
  ],
  "connections": {
    "Wait for Music Processing": {
      "main": [
        [
          {
            "node": "Poll Music Generation Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Poll Music Generation Status": {
      "main": [
        [
          {
            "node": "Check if Music Generation Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Music Generation Complete": {
      "main": [
        [
          {
            "node": "Format and Display Music Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait for Music Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get many database pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "lyrics clanker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "lyrics clanker",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Video script timing clanker",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Theme clanker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a database page": {
      "main": [
        [
          {
            "node": "NanoBanana: Create Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create a database page",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Theme clanker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Theme clanker",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Video script timing clanker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "lyrics clanker": {
      "main": [
        []
      ]
    },
    "Theme clanker": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request create song": {
      "main": [
        [
          {
            "node": "Wait for Music Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format and Display Music Results": {
      "main": [
        [
          {
            "node": "Download songs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        []
      ]
    },
    "Download songs": {
      "main": [
        [
          {
            "node": "Upload file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file1": {
      "main": [
        []
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Video script timing clanker",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think1": {
      "ai_tool": [
        [
          {
            "node": "lyrics clanker",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Video Script Clanker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think3": {
      "ai_tool": [
        [
          {
            "node": "Generate Video Script Clanker",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Video Script Clanker",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Video script timing clanker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Prompt": {
      "main": [
        []
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        []
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Upload image to kei",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload image to kei": {
      "main": [
        [
          {
            "node": "Post request to generate video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post request to generate video": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Video Script Clanker": {
      "main": [
        [
          {
            "node": "Format Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video script timing clanker": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Video Script Clanker1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think4": {
      "ai_tool": [
        [
          {
            "node": "Generate Video Script Clanker1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Video Script Clanker1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Generate Video Script Clanker1": {
      "main": [
        []
      ]
    },
    "NanoBanana: Create Image": {
      "main": [
        [
          {
            "node": "Wait for Image Edit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Image Edit": {
      "main": [
        [
          {
            "node": "Download Edited Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Edited Image": {
      "main": [
        [
          {
            "node": "is image generating",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload image to kei1": {
      "main": [
        [
          {
            "node": "Post request to generate video1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Upload image to kei1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        []
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Check video status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dowload nano banana image from kei": {
      "main": [
        [
          {
            "node": "Code in JavaScript5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Request video info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request video info": {
      "main": [
        [
          {
            "node": "Upload video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload video": {
      "main": [
        [
          {
            "node": "Call 'Automate Video Content Posting to Multiple Social Platforms with Postiz'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Code in JavaScript4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript5": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many database pages": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file2": {
      "main": [
        []
      ]
    },
    "Code in JavaScript4": {
      "main": [
        [
          {
            "node": "Upload file2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post request to generate video1": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think2": {
      "ai_tool": [
        [
          {
            "node": "Theme clanker",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "Dowload nano banana image from kei",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get many database pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check video status": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "is image generating": {
      "main": [
        [
          {
            "node": "Wait for Image Edit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send message and wait for response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate json": {
      "main": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateId": "6046",
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Upload image to kei": [
      {
        "json": {
          "success": true,
          "code": 200,
          "msg": "文件上传成功",
          "data": {
            "success": true,
            "fileName": "test-image2025-09-20-46:45.png",
            "filePath": "kieai/179288/images/base64/test-image2025-09-20-46:45.png",
            "downloadUrl": "https://tempfile.redpandaai.co/kieai/179288/images/base64/test-image2025-09-20-46:45.png",
            "fileSize": 1850427,
            "mimeType": "image/png",
            "uploadedAt": "2025-09-20T15:45:49.552Z"
          }
        }
      }
    ],
    "Post request to generate video": [
      {
        "json": {
          "code": 200,
          "msg": "success",
          "data": {
            "taskId": "abe48936a40ee34cff45fe28716a4065"
          }
        }
      }
    ],
    "Generate Video Script Clanker": [
      {
        "json": {
          "output": {
            "title": "Fun Science Fact with Lab Mascot Singing",
            "final_prompt": "{\"title\":\"Fun Science Fact with Lab Mascot Singing\",\"goal\":\"Teach one fun science fact in a friendly, kid-safe way while the mascot host sings to the final song. No on-screen captions.\",\"format\":{\"platform\":\"TikTok / Reels\",\"aspect_ratio\":\"9:16\",\"resolution\":\"1080x1920\",\"fps\":24,\"duration_sec\":40},\"assets\":{\"audio_url\":\"<https link to final song>\",\"reference_image_url\":\"https://drive.google.com/file/d/1KaY5aIfDSLle062iYli6xN8tnwE2q94s/view?usp=drive_link\"},\"scene_summary\":\"Soft sci-fi lab; cozy, bright, and clean. The cute lab-mascot explains a single science fact with simple gestures and bouncy timing.\",\"style\":\"cute, cinematic, soft light, shallow depth of field, playful, wholesome\",\"camera\":{\"type\":\"steadicam/dolly\",\"movement\":\"gentle push-ins and micro orbits synced to downbeats\",\"lens\":\"50\u001385mm portrait feel\"},\"lighting\":{\"type\":\"soft + rim\",\"sources\":\"warm key from camera-left, cyan rim from back-right, practical lab glows\",\"fx\":\"subtle bokeh, very light volumetrics\"},\"environment\":{\"location\":\"friendly futuristic lab\",\"set_pieces\":[\"benches with soft cyan lights\",\"cute glass beakers\",\"tiny hologram panel\"],\"mood\":\"clean, upbeat, curious\"},\"subject\":{\"host\":{\"description\":\"adorable lab-mascot with big bright eyes, fluffy collar, white lab coat with colorful pens\",\"pose\":\"open posture, small head bops, enthusiastic paw gestures\",\"identity_lock\":\"must match reference_image_url across all shots\"}}},\"learning_goal\":\"One clear takeaway in one sentence (kid-safe wording).\",\"lyrics_input\":\"<paste raw lyrics here>\",\"beat_map\":[{\"t_start\":0.00,\"t_end\":2.20,\"lyric\":\"<line 1>\",\"syllables\":6},{\"t_start\":2.20,\"t_end\":4.60,\"lyric\":\"<line 2>\",\"syllables\":7}],\"shots\":[{\"id\":\"S1\",\"t_start\":0.00,\"t_end\":3.00,\"purpose\":\"Meet the host; start the hook\",\"framing\":\"medium close-up\",\"camera\":\"gentle push-in\",\"action\":\"host smiles, inhales subtly, starts singing; paw pops on first downbeat\",\"lip_sync_to\":[0],\"veo_prompt\":\"Vertical 9:16. Cute lab-mascot matching the reference image sings in a softly lit futuristic lab. Realistic fur, glossy eyes, shallow DOF, cyan accents, gentle push-in. No text, no watermarks.\"},{\"id\":\"S2\",\"t_start\":3.00,\"t_end\":6.00,\"purpose\":\"Teach the core fact beat\",\"framing\":\"tight close-up\",\"camera\":\"locked with micro handheld breathing\",\"action\":\"mouth shapes AA/EE on stressed syllables; head bop on beats; quick glance to tiny hologram\",\"lip_sync_to\":[1],\"veo_prompt\":\"Close-up of the same mascot with precise lip-sync, cyan rim light, soft key, shallow DOF. No text.\"}],\"motion\":{\"type\":\"playful gestures + small hologram cutaways\",\"details\":\"on emphasized words, a tiny lab hologram blips on/off; subtle paw arcs timed to downbeats\"},\"vfx\":{\"hologram\":\"soft cyan HUD elements that appear briefly (no readable text)\",\"particles\":\"very light dust motes in the bokeh\"},\"audio\":{\"music\":\"use provided song only\",\"sfx\":[\"soft woosh on camera push\",\"tiny blip when hologram appears\"],\"ambience\":\"low room tone\",\"lip_sync\":\"strong; map visemes (MBP, EE, OH, FV) to lyric phonemes; align to beat_map\"},\"ending\":\"Host lands on a cute smile + tiny paw wave; quick 0.4s hold; fade out audio tail.\",\"safety_and_rules\":[\"no on-screen text or captions\",\"brand-safe, kid-safe\",\"keep host identity consistent with reference image\",\"no logos/watermarks beyond platform defaults\"],\"keywords\":[\"cute\",\"educational\",\"mascot\",\"science fact\",\"soft sci-fi lab\",\"vertical video\"]}"
          }
        }
      }
    ]
  },
  "versionId": "4212db3b-9a2b-4e0f-9f4f-6ec410cea0b1",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-20T21:46:35.225Z",
      "updatedAt": "2025-09-20T21:46:35.225Z",
      "role": "workflow:owner",
      "workflowId": "ESI2dDbq6Kd1Bi0f",
      "projectId": "kqMrkEZYsdGVbgzw"
    }
  ],
  "tags": []
}