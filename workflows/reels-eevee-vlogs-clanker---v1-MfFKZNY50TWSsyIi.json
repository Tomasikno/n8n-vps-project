{
  "createdAt": "2025-09-23T14:15:21.769Z",
  "updatedAt": "2025-09-23T15:31:06.000Z",
  "id": "MfFKZNY50TWSsyIi",
  "name": "Reels eevee vlogs clanker - v1",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1008,
        2448
      ],
      "id": "da86a11b-f5b2-49d9-89d3-8038bebc6139",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -304,
        2672
      ],
      "id": "9147b8c4-ab81-4c51-8052-95083870c3e2",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "mode": "list",
          "cachedResultName": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "cachedResultUrl": "https://www.notion.so/27358cd71b1580e5965fd144b72c15b4"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Theme|title",
              "title": "={{ $json.title }}"
            },
            {
              "key": "OneLiner|rich_text",
              "textContent": "={{ $json.prompt }}"
            },
            {
              "key": "Hash|number",
              "numberValue": "={{ $json._hash }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        608,
        2448
      ],
      "id": "cb9b8336-5f1f-4061-9cf9-0e2511fb4f93",
      "name": "Create a database page",
      "credentials": {
        "notionApi": {
          "id": "lDq6KxxGETipZmXY",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Input: Agent JSON on $json.data; past themes on $json.pastThemes (array of strings)\n// Output: either passes through or throws to trigger a regenerate loop\n\nfunction normalize(s) {\n  return s.toLowerCase().replace(/\\s+/g, ' ').trim();\n}\n\nfunction jaroWinkler(s1, s2) {\n  // Lightweight similarity; good enough for titles\n  const m = Math.floor(Math.max(s1.length, s2.length) / 2) - 1;\n  let matches1 = new Array(s1.length).fill(false);\n  let matches2 = new Array(s2.length).fill(false);\n  let matches = 0, transpositions = 0;\n\n  for (let i = 0; i < s1.length; i++) {\n    const start = Math.max(0, i - m), end = Math.min(i + m + 1, s2.length);\n    for (let j = start; j < end; j++) {\n      if (!matches2[j] && s1[i] === s2[j]) { matches1[i] = matches2[j] = true; matches++; break; }\n    }\n  }\n  if (matches === 0) return 0;\n\n  let k = 0;\n  for (let i = 0; i < s1.length; i++) {\n    if (matches1[i]) {\n      while (!matches2[k]) k++;\n      if (s1[i] !== s2[k]) transpositions++;\n      k++;\n    }\n  }\n  transpositions /= 2;\n\n  const j = (matches / s1.length + matches / s2.length + (matches - transpositions) / matches) / 3;\n\n  // Winkler prefix boost\n  let prefix = 0;\n  for (let i = 0; i < Math.min(4, s1.length, s2.length); i++) {\n    if (s1[i] === s2[i]) prefix++; else break;\n  }\n  return j + prefix * 0.1 * (1 - j);\n}\n\nconst agent = $json.output; // JSON from Agent\nconst theme = normalize(agent.prompt || '');\nconst line  = normalize(agent.title || '');\n\nconst past = ($json.pastThemes || []).map(normalize);\nconst candidate = `${theme} | ${line}`;\n\n// Quick hash to catch exact/near-exact repeats\nfunction simpleHash(s) {\n  let h = 0; for (let i = 0; i < s.length; i++) h = (h * 31 + s.charCodeAt(i)) | 0;\n  return h >>> 0;\n}\nconst candHash = simpleHash(candidate);\n\n// Thresholds: adjust to be stricter/looser\nconst SIM_THRESH = 0.90; // 0..1 (higher = stricter)\n\nlet tooSimilar = false;\nfor (const prev of past) {\n  const sim = jaroWinkler(candidate, prev);\n  if (sim >= SIM_THRESH || simpleHash(prev) === candHash) {\n    tooSimilar = true; break;\n  }\n}\n\nif (tooSimilar) {\n  // Throwing makes the node fail and lets you loop back to the Agent\n  throw new Error('Theme too similar to a past entry. Regenerate.');\n}\n\n// If it's unique, expose it for saving\nreturn { ...agent, _hash: candHash };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        2448
      ],
      "id": "e4ee93a6-9cb4-447c-b492-2d3a171a4d07",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fd34a46c-85f5-42a1-a056-cf1108603b6f",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        384,
        2448
      ],
      "id": "9d249829-2145-41a3-9aab-ae78e00cae36",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Input is many items from Data Store. We output ONE item.\nconst themes = $('Get many database pages').all().map(i => {\n  console.log(i);\n  const t = i.json.name || '';\n  const l = i.json.property_one_liner || '';\n  return `${t} | ${l}`.trim();\n});\nreturn [{ json: { pastThemes: themes } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        2448
      ],
      "id": "9a8508b5-2498-4f2f-9130-91f245993895",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"style\": \"string\",\n  \"location\": \"string\",\n  \"mood\": \"string\",\n  \"aspect_ratio\": \"9:16\",\n  \"title\": \"title\",\n  \"description\": \"desc\",\n  \"what_eevee_is_doing\": \"string with actions\",\n  \"tags\": [\"pokemon\", \"eevee\", \"cute\"],\n  \"safety_rule\": \"Imply danger only; freeze BEFORE any contact; wholesome and kid-safe.\",\n  \"negative_prompt\": \"text, captions, UI, logos, watermark, gore, injury, violence, distress, hypersexualization, extra limbs, deformed eyes, poor anatomy, low-res, heavy blur, glitches, jpeg artifacts\",\n  \"prompt\": \"1–2 sentences describing the exact shot to render, including Eevee’s pose/expression, the chosen LOCATION and props, the HAZARD present but not touching, STYLE cues, portrait look (50–85mm), soft warm key + cool rim, shallow depth of field, no text.\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -32,
        2672
      ],
      "id": "dee87ef8-a4cc-4162-8053-7766caf586cd",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=ROLE\n\nYou are a prompt-engineer for an image model. Generate one still-image prompt of Eevee vlogging her daily life — selfie POV, no speech, only cute Eevee sounds in the imagined video. Also output a YouTube Shorts Title + Description for the video we’ll cut from this image.\n\nRANDOM SEED FOR YOUR GENERATION {{ (Math.floor(Math.random()*9000000000)+10000000)+ $now.toMillis() >>> 0 }}\n\nINPUTS\n\nPAST_THEMES: {{ $json.pastThemes }}\n\nDIVERSITY MEMORY\n\nStudy PAST_THEMES (last 10). Avoid conceptual overlap. If unavoidable, change angle, setting, time-of-day, weather, or aesthetic.\n\nGLOBAL TONE & SAFETY\n\nPlayful, cozy, curious. Subtle physics tells: early motion blur, indicator LEDs blinking, mist/drizzle first droplets, wheel barely unseated, airflow ruffling fur.\n\nHARD RULES\n\nPortrait 9:16, one frame only, high detail, sharp focus, shallow DOF.\n\nNo text/logos/watermarks/UI.\n\nEevee on-model: expressive eyes, perky ears, small paws, fluffy tail, cute.\n\nReal-life-scale props only.\n\nSFW and reversible; no brands.\n\nVLOG-SPECIFIC RULES\n\nSelfie POV: Eevee holds a selfi stick at arm’s length; edges/corner of device cant be visible be subtly visible. no cameras or monile phones. Eevee is using her selfie stick to record herself.\n\nLens look: wide selfie (~24–28mm equiv); slight arm-length distortion; micro OIS jitter; phone-screen catchlight reflected in Eevee’s eyes.\n\nLighting reads natural: soft warm key from camera-left; cool rim from back-right (e.g., window vs. street/cooler).\n\nKeep the background readable (clean, realistic), with depth cues and mild bokeh.\n\nCURATED POOLS\n\nSTYLE (default): cute, cinematic, soft light, cozy, colorful, glossy highlights, airy, high key, natural materials, filmic grain, studio rim light, warm tones, gentle bloom, realistic fur, CG-to-photoreal look.\n\nLOCATION (generate a concise new phrase ≤6 words): realistic, non-specific, varied (indoor/outdoor/office/nature/industrial/kitchen/jobs/food/gym/events/hikes/forests/meadow), include time-of-day/weather/crowd variety, and not a near-duplicate of PAST_THEMES. Add 2–3 grounded props.\n\nMOOD (2–4 words): e.g., wide-eyed wonder; playful curiosity; mildly alarmed, cheerful; cozy focus.\n\nSPORTS POOL for WHAT_EEVEE_IS_DOING (pick 1):\nFootball, Basketball, Cricket, Tennis, Volleyball, TableTennis, Baseball, American Football, Rugby Union, Golf, Badminton, Ice Hockey, Field Hockey, Boxing, Mixed Martial Arts (MMA), Athletics (Track & Field), Swimming, Road Cycling, Gymnastics (Artistic), Wrestling, Judo, Karate, Taekwondo, Fencing, Weightlifting, Triathlon, Alpine Skiing, Snowboarding, Biathlon, Speed Skating, Figure Skating, Surfing, Skateboarding, Handball, Water Polo, Snooker, Darts, Formula 1 (Motorsport), MotoGP, Lacrosse, Softball, Netball, Squash, Mountain Biking, Polo, Rowing, Canoe/Kayak Sprint, Beach Volleyball, Gaelic Football, Esports.\n\nPROMPT CONSTRUCTION (what the image model should render)\n\nWrite 1–2 compact sentences that include all of the following, in natural prose:\n\nEevee’s selfie pose & micro-action (curious/cheerful): e.g., “Selfie POV — Eevee mid-step, ears perked, tail puffed, big bright eyes, paw steadying the phone.”\n\nLOCATION phrase (≤6 words) + 2–3 grounded props (realistic scale).\n\nSTYLE + lighting (from VLOG-SPECIFIC + STYLE pool): soft warm key camera-left; cool rim back-right; selfie wide ~24–28mm; shallow DOF; clean, realistic background; subtle filmic grain; gentle bloom; realistic fur.\n\nMOOD (2–4 words).\n\nWHAT_EEVEE_IS_DOING: integrate one SPORT from the pool into the daily-vlog activity.\n\nKeep it a single, vivid paragraph (no lists), present tense, and strictly no UI/text/brand names.\n\nYOUTUBE METADATA\n\nTITLE (≤99 chars): Keep punchy and readable.\n\nDESCRIPTION: 1–2 sentence hook about the vlog moment (no speech; only cute Eevee sounds), then a short tag block. Add 1 theme-relevant hashtags plus #CutePokémon #shors #foryou #viral,  include emojis.",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -240,
        2448
      ],
      "id": "5add27e4-efb2-4e9a-b045-70094c0604c3",
      "name": "Theme clanker"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "id": "2a21f925-1cff-4a48-9691-d7ab013a63e4",
      "name": "OpenAI Chat Model5",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -288,
        3152
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "x4WuZYjSfm0LFGHN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "id": "9af2a15a-7066-4093-8752-bfbacebe3cbc",
      "name": "Think4",
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "position": [
        -160,
        3152
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"string\",\n  \"final_prompt\": \"string\"\n}\n"
      },
      "id": "00eb8173-fb70-4101-ab02-86ef13b6ea08",
      "name": "Structured Output Parser5",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -48,
        3152
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Eevee holds a selfie stick and records her daily vlog and makes cute foxlike noises. Eevee is recording hersel.\n\nGlobal constraints\n\nHyper-adorable, wholesome. Contact with object.\nSubject: Eevee faces camera; Eevee should make cute fox like noises, no song or music.\nReal-world physics; life-sized; LOCATION must be plausible.\nThree motion layers (amplified): Subject / Camera / Environment as specified below. Eevee needs to be safe at all times. Output needs to be json ready. No empty lines and special chars.\n\nInputs\n\nMOOD: {{ $('Theme clanker').item.json.output.mood }}\nOBEJCTS: {{ $('Theme clanker').item.json.output.objects_in_scene }}\nWHAT_EEVEE_IS_DOING:{{ $('Theme clanker').item.json.output.what_eevee_is_doing }}\nSTYLE (fallback if missing): cute, cinematic, soft light, cozy, colorful, glossy highlights, airy, high key, natural materials, filmic grain, studio rim light, warm tones, gentle bloom, realistic fur.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a senior prompt-engineer for Google VEO-3. Produce a short-form vertical video prompt for a single image input, preserving visual continuity (subject, styling, props). Output one cohesive prompt (no on-screen text). Final prompt should include mention of eevee sounds and music in the background. Eevee should be active and not standing around.\n\nContinuity: Match Eevee’s look, fur, lighting vibe, LOCATION, props, and time-of-day indicated in image."
        }
      },
      "id": "9989fdd6-6862-4fcc-bb26-6cef2bdffffc",
      "name": "Generate Video Script Clanker1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -224,
        2960
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/jobs/createTask",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"google/nano-banana\",\n  \"callBackUrl\": \"https://your-domain.com/api/callback\",\n  \"input\": {\n    \"prompt\": \"{{ $('Theme clanker').item.json.output.prompt }}\",\n    \"output_format\": \"png\",\n    \"image_size\": \"9:16\"\n  }\n}",
        "options": {}
      },
      "id": "780ddcd5-c931-4321-adeb-926c8bef6125",
      "name": "NanoBanana: Create Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        832,
        2448
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "foWS03OsC9HJFKQs",
          "name": "Gemini"
        },
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "amount": 15
      },
      "id": "5b6e0bd3-189b-49d4-88ed-82d59f9bbcc2",
      "name": "Wait for Image Edit",
      "type": "n8n-nodes-base.wait",
      "position": [
        1056,
        2448
      ],
      "webhookId": "7fa99f34-8eb2-4656-9118-62709e17383e",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "url": "https://api.kie.ai/api/v1/jobs/recordInfo",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{ $json.data.taskId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "05490333-9f23-427a-96a3-f0cfbbf8dda7",
      "name": "Download Edited Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1280,
        2368
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "foWS03OsC9HJFKQs",
          "name": "Gemini"
        },
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "name": "=eevee-img-{{ $('NanoBanana: Create Image').item.json.data.taskId }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1u3NLKJAZekpnEeDKfbFDMttdxeWoCRzv",
          "mode": "list",
          "cachedResultName": "songs",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1u3NLKJAZekpnEeDKfbFDMttdxeWoCRzv"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -720,
        2960
      ],
      "id": "a4bd3fb5-61d6-4d77-a45a-5ccb08abf978",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ih6pau2KBlXO6pNC",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://kieai.redpandaai.co/api/file-base64-upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "base64Data",
              "value": "={{ $('Code in JavaScript5').item.json.data.data }}"
            },
            {
              "name": "uploadPath",
              "value": "images/base64"
            },
            {
              "name": "fileName",
              "value": "=test-image{{$now.format('yyyy-MM-dd-ss:mm')}}.png"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -528,
        2960
      ],
      "id": "a83433f9-637a-4b46-ba45-503dca2b7f93",
      "name": "Upload image to kei1",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        768,
        2864
      ],
      "id": "b220747a-49a8-4c06-a343-da64c18d468c",
      "name": "Wait1",
      "webhookId": "9f6ccee7-9c64-4f93-871e-7c07a0fea933"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "534dab23-0283-4363-8adf-fe3bf721ab73",
              "leftValue": "={{ $json.data.successFlag }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1216,
        2864
      ],
      "id": "3fa70304-c257-4b15-ab6f-d473728e2cac",
      "name": "If4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a076f882-1a40-4aca-8cf2-318b031fdb4f",
              "leftValue": "={{ $json.msg }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        544,
        2960
      ],
      "id": "3176ad7a-30ba-45f7-a98f-72ba46cce879",
      "name": "If5"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "846456961419444304",
          "mode": "list",
          "cachedResultName": "Tomasiknos diary",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304"
        },
        "channelId": {
          "__rl": true,
          "value": "1417600388479189136",
          "mode": "list",
          "cachedResultName": "videos-notification",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304/1417600388479189136"
        },
        "content": "Sending request to create video failed, check logs\n",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        768,
        3056
      ],
      "id": "c320e060-7eaa-4e65-87eb-93ed8dc486c7",
      "name": "Send a message2",
      "webhookId": "958b18ac-9ab0-46aa-b779-594f7d75e003",
      "credentials": {
        "discordBotApi": {
          "id": "kODEUwvmo26ApL4g",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "276822ad-b580-4a8c-b893-99eae452add9",
              "leftValue": "={{ $json.data.successFlag }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1440,
        2864
      ],
      "id": "de971bcb-47b0-4c22-9bfc-0135e5579873",
      "name": "If6"
    },
    {
      "parameters": {
        "url": "={{ $('Download Edited Image').item.json.data.resultJson.parseJson().resultUrls[0] }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2272,
        2592
      ],
      "id": "153acb91-78ea-463e-b137-fbf0f6f9b7c8",
      "name": "Dowload nano banana image from kei",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.data.response.resultUrls[0] }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1664,
        2864
      ],
      "id": "e0c8619b-f471-4083-b412-37812a5e97c3",
      "name": "Request video info",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "NYWE2eTlJYQ0WPTb",
          "mode": "list",
          "cachedResultName": "Automate Video Content Posting to Multiple Social Platforms with Postiz"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.name }}",
            "videoId": "={{ $json.id }}",
            "prompt": "={{ $('Generate Video Script Clanker1').item.json.output.final_prompt }}",
            "tags": "={{ $('Theme clanker').item.json.output.tags }}",
            "videoTitle": "={{ $('Theme clanker').item.json.output.title }}",
            "videoDesc": "={{ $('Theme clanker').item.json.output.description }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "tags",
              "displayName": "tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array"
            },
            {
              "id": "prompt",
              "displayName": "prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "videoId",
              "displayName": "videoId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "videoTitle",
              "displayName": "videoTitle",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "videoDesc",
              "displayName": "videoDesc",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        2112,
        2864
      ],
      "id": "4e2baf6e-9709-42cb-8c6b-73c1a55b8c57",
      "name": "Call 'Automate Video Content Posting to Multiple Social Platforms with Postiz'"
    },
    {
      "parameters": {
        "name": "=Eeveevideo-{{ $json.data.response.taskId }}.mp4",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1tnJQGapWf8ZHzSTTJ3KzVXaq5jRAsHf9",
          "mode": "list",
          "cachedResultName": "videos",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1tnJQGapWf8ZHzSTTJ3KzVXaq5jRAsHf9"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1888,
        2864
      ],
      "id": "355f67b2-f83f-456d-a80b-7644f606a4e0",
      "name": "Upload video",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ih6pau2KBlXO6pNC",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => ({\n  json: { ...item.json, data: item.binary.data },\n  binary: item.binary ?? {}\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        2960
      ],
      "id": "42f6f8c0-cbaf-42a1-b07d-bdd17fe5c93f",
      "name": "Code in JavaScript5"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "27358cd7-1b15-80e5-965f-d144b72c15b4",
          "mode": "list",
          "cachedResultName": "Themes",
          "cachedResultUrl": "https://www.notion.so/27358cd71b1580e5965fd144b72c15b4"
        },
        "limit": 10,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -768,
        2448
      ],
      "id": "2da764ab-ce3f-44ba-aefb-32201c360e21",
      "name": "Get many database pages",
      "credentials": {
        "notionApi": {
          "id": "lDq6KxxGETipZmXY",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/veo/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"prompt\":\"{{ $json.output.final_prompt }}\",\n  \"imageUrls\": [\n    \"{{ $('Upload image to kei1').item.json.data.downloadUrl }}\"\n  ],\n  \"model\": \"veo3_fast\",\n  \"watermark\": \"EeveesSongs\",\n  \"callBackUrl\": \"http://your-callback-url.com/complete\",\n  \"aspectRatio\": \"9:16\",\n  \"seeds\": {{ Math.floor(Math.random() * 90000) + 10000 }},\n  \"enableFallback\": false,\n  \"enableTranslation\": true\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        2960
      ],
      "id": "956a1c54-0077-4cbc-8675-c87521898222",
      "name": "Post request to generate video1",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        -176,
        2672
      ],
      "id": "01207b5f-7374-419a-a422-d9b94380ff54",
      "name": "Think2"
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "sendAndWait",
        "guildId": {
          "__rl": true,
          "value": "846456961419444304",
          "mode": "list",
          "cachedResultName": "Tomasiknos diary",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304"
        },
        "channelId": {
          "__rl": true,
          "value": "1417600388479189136",
          "mode": "list",
          "cachedResultName": "videos-notification",
          "cachedResultUrl": "https://discord.com/channels/846456961419444304/1417600388479189136"
        },
        "message": "=📹 **New Video Concept Created!**  \n👉 [{{ $('Theme clanker').item.json.output.title }}]({{ $json.data.resultJson.parseJson().resultUrls }})  \n{{ $json.data.resultJson.parseJson().resultUrls }}\nDo you approve? ✅❌\n------------------------",
        "approvalOptions": {
          "values": {
            "approvalType": "double"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1728,
        2448
      ],
      "id": "7e13bf49-32ba-480b-b4a7-613820603459",
      "name": "Send message and wait for response",
      "webhookId": "740de502-0c6b-4d90-83fc-567db340f105",
      "credentials": {
        "discordBotApi": {
          "id": "kODEUwvmo26ApL4g",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "209f3354-931f-46a0-8b8e-10b2337200ce",
              "leftValue": "={{ $json.data.approved }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1936,
        2448
      ],
      "id": "4b80bf2b-c838-42c9-948d-bdfc07045744",
      "name": "If7"
    },
    {
      "parameters": {
        "url": "https://api.kie.ai/api/v1/veo/record-info",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{ $json.data.taskId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        992,
        2784
      ],
      "id": "f2bbea4e-ddbe-46e2-b751-ab5e2f3b48ca",
      "name": "Check video status",
      "credentials": {
        "httpBearerAuth": {
          "id": "MpyAwaVM7w2r7fsp",
          "name": "kei"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5d8cacba-15ca-4a89-b063-d3093d9818b0",
              "leftValue": "={{ $json.data.state }}",
              "rightValue": "generating",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "65fe8425-8fd0-4642-8aaf-11ea5401d223",
              "leftValue": "={{ $json.data.state }}",
              "rightValue": "waiting",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1504,
        2448
      ],
      "id": "18db9243-f945-4072-a993-cb3f5db7ffd3",
      "name": "is image generating"
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get many database pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Theme clanker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create a database page": {
      "main": [
        [
          {
            "node": "NanoBanana: Create Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create a database page",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Theme clanker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Theme clanker",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Theme clanker": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Video Script Clanker1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think4": {
      "ai_tool": [
        [
          {
            "node": "Generate Video Script Clanker1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Video Script Clanker1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Generate Video Script Clanker1": {
      "main": [
        [
          {
            "node": "Post request to generate video1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NanoBanana: Create Image": {
      "main": [
        [
          {
            "node": "Wait for Image Edit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Image Edit": {
      "main": [
        [
          {
            "node": "Download Edited Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Edited Image": {
      "main": [
        [
          {
            "node": "is image generating",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload image to kei1": {
      "main": [
        [
          {
            "node": "Generate Video Script Clanker1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Upload image to kei1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Check video status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dowload nano banana image from kei": {
      "main": [
        [
          {
            "node": "Code in JavaScript5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Request video info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request video info": {
      "main": [
        [
          {
            "node": "Upload video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload video": {
      "main": [
        [
          {
            "node": "Call 'Automate Video Content Posting to Multiple Social Platforms with Postiz'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript5": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many database pages": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post request to generate video1": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think2": {
      "ai_tool": [
        [
          {
            "node": "Theme clanker",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "Dowload nano banana image from kei",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get many database pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check video status": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "is image generating": {
      "main": [
        [
          {
            "node": "Wait for Image Edit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send message and wait for response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateId": "6046",
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "3ed80907-5641-4ef6-b43b-22f1aa441fae",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-23T14:15:21.787Z",
      "updatedAt": "2025-09-23T14:15:21.787Z",
      "role": "workflow:owner",
      "workflowId": "MfFKZNY50TWSsyIi",
      "projectId": "kqMrkEZYsdGVbgzw"
    }
  ],
  "tags": []
}